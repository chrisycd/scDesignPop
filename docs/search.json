[{"path":"https://github.com/chrisycd/scDesignPop/LICENSE-text.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 scDesignPop authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 scDesignPop authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-celltype-prop-modeling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Model cell type proportions for new individuals","text":"scDesignPop provide modeling cell type proportions generating new cell type proportions new simulated individuals. default covariates used PCs genotypes, show following tutorial.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-celltype-prop-modeling.html","id":"library-and-data-preparation","dir":"Articles","previous_headings":"","what":"Library and data preparation","title":"Model cell type proportions for new individuals","text":", load example_sce data genotype PCs training example_sce data new simulated individuals.","code":"load(\"/home/ycen/proj/scEQTLsim/data/tutorials/example_sce.rda\") load(\"/home/ycen/proj/scEQTLsim/data/tutorials/example_genoPCs.rda\") othercov_new <- dplyr::select(genopc_new, indiv)  head(genopc_train) #> # A tibble: 6 × 31 #>   indiv      PC1      PC2       PC3      PC4       PC5     PC6      PC7      PC8 #>   <chr>    <dbl>    <dbl>     <dbl>    <dbl>     <dbl>   <dbl>    <dbl>    <dbl> #> 1 SAMP1  0.00988  0.0240   0.0552   -0.00774 -0.0239    0.0380  0.00775 -0.0179  #> 2 SAMP2 -0.0217  -0.00495  0.00717  -0.0191   0.000858  0.0210 -0.00205 -0.0159  #> 3 SAMP3  0.00503  0.0103  -0.00238  -0.0363   0.00505  -0.0245  0.0645  -0.0149  #> 4 SAMP4 -0.0410   0.0297  -0.0341    0.0263  -0.0249    0.0171 -0.00949 -0.00863 #> 5 SAMP5 -0.00978  0.0294   0.0504   -0.0194  -0.0179    0.0368  0.0135   0.0115  #> 6 SAMP6 -0.0212  -0.0106  -0.000811 -0.0106   0.0300    0.0547  0.00962 -0.0380  #> # ℹ 22 more variables: PC9 <dbl>, PC10 <dbl>, PC11 <dbl>, PC12 <dbl>, #> #   PC13 <dbl>, PC14 <dbl>, PC15 <dbl>, PC16 <dbl>, PC17 <dbl>, PC18 <dbl>, #> #   PC19 <dbl>, PC20 <dbl>, PC21 <dbl>, PC22 <dbl>, PC23 <dbl>, PC24 <dbl>, #> #   PC25 <dbl>, PC26 <dbl>, PC27 <dbl>, PC28 <dbl>, PC29 <dbl>, PC30 <dbl> head(genopc_new) #> # A tibble: 6 × 31 #>   indiv        PC1      PC2      PC3      PC4      PC5      PC6      PC7     PC8 #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>   <dbl> #> 1 NEW_SA… -0.0167  -4.34e-2 -0.0174  -2.63e-2 -0.0391   1.36e-2  0.00141 -0.0226 #> 2 NEW_SA… -0.0182   2.96e-2 -0.0114  -5.91e-2 -0.0170   6.63e-3 -0.00878 -0.0453 #> 3 NEW_SA… -0.0247  -1.73e-2 -0.00227 -8.02e-4  0.0589  -1.50e-2 -0.0375   0.0260 #> 4 NEW_SA…  0.0199  -4.28e-2 -0.0490   5.99e-2 -0.0323   1.22e-2  0.0627   0.0562 #> 5 NEW_SA…  0.0743  -3.98e-2 -0.0151   3.53e-2 -0.00486  4.28e-2 -0.0277  -0.0236 #> 6 NEW_SA… -0.00289 -8.21e-4 -0.0423   6.06e-4  0.0245  -9.70e-4 -0.0200  -0.0487 #> # ℹ 22 more variables: PC9 <dbl>, PC10 <dbl>, PC11 <dbl>, PC12 <dbl>, #> #   PC13 <dbl>, PC14 <dbl>, PC15 <dbl>, PC16 <dbl>, PC17 <dbl>, PC18 <dbl>, #> #   PC19 <dbl>, PC20 <dbl>, PC21 <dbl>, PC22 <dbl>, PC23 <dbl>, PC24 <dbl>, #> #   PC25 <dbl>, PC26 <dbl>, PC27 <dbl>, PC28 <dbl>, PC29 <dbl>, PC30 <dbl>"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-celltype-prop-modeling.html","id":"celltype-proportion-modeling","dir":"Articles","previous_headings":"","what":"Celltype proportion modeling","title":"Model cell type proportions for new individuals","text":"model cell type proportions Multinomial model using genotype PCs covariates. also model total cell number per individuals log-normal distribution. , indiv_colname used specify shared column name individual ids colData(example_sce) genopc_train. use cellstate_colname specify column name cell states cell types colData(example_sce).","code":"set.seed(123) simu_cellprop_list <- scDesignPop::simuCellProportion(   sce = example_sce,   genoPC = genopc_train,   new_genoPC = genopc_new,   new_othercov = othercov_new,   PCnum = 30L,   cov_colnames = NULL,   indiv_colname = \"indiv\",   cellstate_colname = \"cell_type\",   cn_model_family = \"lognormal\",    # cell number model   cp_model_family = \"MN\",  # cell proportion model   cp_intercept = TRUE ) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-celltype-prop-modeling.html","id":"showing-the-covariates-for-new-individuals","dir":"Articles","previous_headings":"","what":"Showing the covariates for new individuals","title":"Model cell type proportions for new individuals","text":"covariates including cell types new simulated individuals contained following data frame, can given new_covariate parameter function constructDataPop().","code":"head(simu_cellprop_list[[\"simu_cov\"]]) #>                    cell_type     indiv #> simcell1_NEW_SAMP1     monoc NEW_SAMP1 #> simcell2_NEW_SAMP1     monoc NEW_SAMP1 #> simcell3_NEW_SAMP1     monoc NEW_SAMP1 #> simcell4_NEW_SAMP1     monoc NEW_SAMP1 #> simcell5_NEW_SAMP1     monoc NEW_SAMP1 #> simcell6_NEW_SAMP1     monoc NEW_SAMP1"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-celltype-prop-modeling.html","id":"visualizing-the-cell-type-proportion-structures","dir":"Articles","previous_headings":"","what":"Visualizing the cell type proportion structures","title":"Model cell type proportions for new individuals","text":"specifying colors cell type, can visualize cell type proportion structure original data simulated data ordering individuals cell number first cell type. colors specified cell types, function still plot data using R default colors ordering individuals based cell number first cell type factorizing cell types given data.","code":"color_vec <- c(   \"cd4nc\"   = \"#5E3C99\",   \"bmem\"    = \"#FFEDA0\",   \"monoc\"   = \"#FD8D3C\",   \"mononc\"  = \"#FC4E2A\" )   p1 <- scDesignPop::plotCellProp(colData(example_sce),                     title = \"Original 40 individuals\",                    color_vec = color_vec,                     cellstate_colname = \"cell_type\",                    indiv_colname = \"indiv\",                    width = 1, linewidth = 0.02)  p2 <- scDesignPop::plotCellProp(simu_cellprop_list[[\"simu_cov\"]],                     title = \"Simulated 982 individuals\",                    color_vec = color_vec,                     cellstate_colname = \"cell_type\",                    indiv_colname = \"indiv\",                    width = 1, linewidth = 0.01)   cowplot::plot_grid(p1, p2)"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-modify-eQTL-effects.html","id":"step-1-construct-a-data-list","dir":"Articles","previous_headings":"","what":"Step 1: construct a data list","title":"Modify eQTL effect for eGenes / non-eGenes","text":"run scDesignPop, list data required input. done using constructDataPop function. SingleCellExperiment object eqtlgeno dataframe two main inputs needed. eqtlgeno dataframe consists eQTL annotations (must cell state, gene, SNP, chromosome, position columns minimum), genotypes across individuals (columns) every SNP (rows). structure example eqtlgeno dataframe given .","code":"library(scDesignPop) load(\"/home/ycen/proj/scEQTLsim/data/tutorials/example_sce.rda\") load(\"/home/ycen/proj/scEQTLsim/data/tutorials/example_eqtlgeno.rda\") data_list <- constructDataPop(     sce = example_sce,     eqtlgeno_df = example_eqtlgeno,     new_covariate = as.data.frame(colData(example_sce)),     overlap_features = NULL,     sampid_vec = NULL,     ct_copula = TRUE,     slot_name = \"counts\",     snp_model = \"single\",     cellstate_colname = \"cell_type\",     feature_colname = \"gene_id\",     snp_colname = \"snp_id\",     loc_colname = \"POS\",     chrom_colname = \"CHR\",     indiv_colname = \"indiv\",     prune_thres = 0.9     ) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians #> Constructing eqtlgeno list..."},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-modify-eQTL-effects.html","id":"step-2-modify-a-existing-fitted-marginal-model","dir":"Articles","previous_headings":"","what":"Step 2: modify a existing fitted marginal model","title":"Modify eQTL effect for eGenes / non-eGenes","text":"","code":"load(\"/home/ycen/proj/scEQTLsim/data/tutorials/marginal_list_sel.rda\") marginal_mod <- scDesignPop::modifyMarginalModels(   marginal_list = marginal_list_sel[\"ENSG00000163221\"],   eqtlgeno_list = data_list[[\"eqtl_geno_list\"]],   features = \"ENSG00000163221\",   celltype = \"cd4nc\",   mean_log2fc = -1,   eqtl_log2fc = 2,   neg_ctrl = TRUE,   mean_baseline = 0.0214,   # 0.114   eqtl_baseline = 0.0023,  # 0.0023   mean_baseline_only = FALSE,   eqtl_baseline_only = FALSE,   disp_scaling = \"linear\",   cellstate_colname = \"cell_type\",   snp_colname = \"snp_id\",   verbose = TRUE,   debug = TRUE) #> Modifying parameters for ENSG00000163221 in cd4nc celltype... #> celltype effect: -6.44683 ===> new value: -7.33082 #> interaction effect: -0.16812 ===> new value: 0.02273 #> << Setting conditional means to be negative controls (no eQTL effect) >> #> conditional means at geno 0, 1, 2: 0.00963, 0.00796, 0.00657 ===> new values: 0.00398, 0.00398, 0.00398 #> eQTL slope between geno 1 and 0: -0.00167 ===> new value: 0.00000 #> Phi parameter: 1.14919 ===> new value: 0.57459"},{"path":[]},{"path":[]},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-defined.html","id":"step-1-running-power-analysis","dir":"Articles","previous_headings":"","what":"Step 1: running power analysis","title":"Power analysis based on a fitted scDesignPop marginal model","text":"Lastly, scDesignPop can perform simulation-based power analysis specific gene-SNP pair across cell types using runPowerAnalysis function. , choose negative binomial mixed model using \"nb\" option.","code":"set.seed(123) power_data <- runPowerAnalysis(marginal_list = marginal_list,                                marginal_model = \"nb\",                                geneid = \"ENSG00000163221\",                                snpid = \"1:153337943\",                                type_specific = \"cell_type\",                                type_vector = c(\"bmem\", \"monoc\"),                                methods = c(\"nb\"),                                nindivs = c(50, 200),                                ncells = c(10, 50),                                alpha = 0.05,                                power_nsim = 100,                                snp_number = 10,                                gene_number = 800,                                CI_nsim = 1000,                                CI_conf = 0.05,                                ncores = 50L) #> [1] -4.760502 #> [1] 0.07402542 #> [1] 1.848063 #> [1] -0.1496348"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-defined.html","id":"step-2-visualizing-power-results","dir":"Articles","previous_headings":"","what":"Step 2: visualizing power results","title":"Power analysis based on a fitted scDesignPop marginal model","text":"power analysis results can visualized using visualizePowerResult function.","code":"visualizePowerResult(power_result = power_data,                      celltypes = c(\"bmem\", \"monoc\"),                      x_axis = \"nindiv\",                      y_axis = \"ncell\",                      col_group = \"method\",                      geneid = \"ENSG00000163221\",                      snpid = \"1:153337943\")"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-fitted.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Power analysis based on a fitted scDesignPop marginal model","text":"scDesignPop provides power analysis tools cell-type-specific level. Since fitted marginal models can obtained users already generating synthetic datasets, tutorial conduct power analysis basis marginal model files.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-fitted.html","id":"library-and-data-preparation","dir":"Articles","previous_headings":"","what":"Library and data preparation","title":"Power analysis based on a fitted scDesignPop marginal model","text":", load pre-saved marginal_list object obtain fitted marginal model gene ENSG00000163221 (S100A12) simplicity.","code":"library(scDesignPop) library(SingleCellExperiment)  load(\"/home/ycen/proj/scEQTLsim/data/tutorials/marginal_list_sel.rda\") summary(marginal_list_sel$ENSG00000163221$fit) #>  Family: nbinom2  ( log ) #> Formula:           #> response ~ (1 | indiv) + cell_type + `1:153337943` + `1:153337943`:cell_type #> Data: res_list[[\"dmat_df\"]] #>  #>      AIC      BIC   logLik deviance df.resid  #>  11088.7  11158.3  -5534.4  11068.7     7801  #>  #> Random effects: #>  #> Conditional model: #>  Groups Name        Variance Std.Dev. #>  indiv  (Intercept) 0.08141  0.2853   #> Number of obs: 7811, groups:  indiv, 40 #>  #> Dispersion parameter for nbinom2 family (): 1.15  #>  #> Conditional model: #>                               Estimate Std. Error z value Pr(>|z|)     #> (Intercept)                    1.80392    0.07763  23.237   <2e-16 *** #> cell_typemononc               -4.65391    0.22215 -20.949   <2e-16 *** #> cell_typebmem                 -5.96487    0.31401 -18.996   <2e-16 *** #> cell_typecd4nc                -6.44683    0.22816 -28.256   <2e-16 *** #> `1:153337943`                 -0.02273    0.08603  -0.264    0.792     #> cell_typemononc:`1:153337943` -0.15160    0.27980  -0.542    0.588     #> cell_typebmem:`1:153337943`   -0.55004    0.39328  -1.399    0.162     #> cell_typecd4nc:`1:153337943`  -0.16812    0.29164  -0.576    0.564     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-fitted.html","id":"performing-power-analysis","dir":"Articles","previous_headings":"","what":"Performing power analysis","title":"Power analysis based on a fitted scDesignPop marginal model","text":"Given fitted marginal model, scDesignPop can perform simulation-based power analysis specific gene-SNP pair across selected cell types using runPowerAnalysis function. Based previous naming covariates, specify fitted snpid \"1:153337943\", name column fixed cell state effect random individual effect \"cell_type\" \"indiv\" input parameters. check namings, can call covariate data frame using marginal_list_sel[[\"ENSG00000163221\"]]$fit$frame. selected cell types testing specified cellstate_vector consistent covariate data frame. Particarly, parameters snp_number gene_number used account multiple testing correction Bonferroni correction. Parameter methods used specify marginal eQTL model c(\"nb\", \"poisson\", \"gaussian\", \"pseudoBulkLinear\"). Parameter nindivs ncells used specify number individuals number cells per individual, can analyze performance power analysis find optimal setting.","code":"set.seed(123) power_data <- runPowerAnalysis(marginal_list = marginal_list_sel,                                geneid = \"ENSG00000163221\",                                snpid = \"1:153337943\",                                cellstate_colname = \"cell_type\",                                cellstate_vector = c(\"bmem\", \"monoc\"),                                indiv_colname = \"indiv\",                                methods = c(\"poisson\",\"pseudoBulkLinear\"),                                nindivs = c(50, 200),                                ncells = c(10, 50),                                alpha = 0.05,                                power_nsim = 50,                                snp_number = 10,                                gene_number = 200,                                CI_nsim = 1000,                                CI_conf = 0.05,                                ncores = 50L) #> [1] -4.160949 #> [1] -0.5727631 #> [1] 1.803924 #> [1] -0.02272728 #> [1] -4.160949 #> [1] -0.5727631 #> [1] 1.803924 #> [1] -0.02272728"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-fitted.html","id":"visualization-of-power-results","dir":"Articles","previous_headings":"","what":"Visualization of power results","title":"Power analysis based on a fitted scDesignPop marginal model","text":"power analysis results can visualized using visualizePowerResult function. cell type names cellstate_vector must included power analysis.  swaping x y axis, can show result different way.","code":"visualizePowerResult(power_result = power_data,                      cellstate_vector = c(\"bmem\", \"monoc\"),                      x_axis = \"nindiv\",                      y_axis = \"ncell\",                      col_group = \"method\",                      geneid = \"ENSG00000163221\",                      snpid = \"1:153337943\") visualizePowerResult(power_result = power_data,                      cellstate_vector = c(\"bmem\", \"monoc\"),                      x_axis = \"ncell\",                      y_axis = \"nindiv\",                      col_group = \"method\",                      geneid = \"ENSG00000163221\",                      snpid = \"1:153337943\")"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-selected.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Power analysis for selected genes","text":"scDesignPop provides power analysis tools cell-type-specific level. tutorial conduct power analysis selected genes using expression count data.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-selected.html","id":"library-and-data-preparation","dir":"Articles","previous_headings":"","what":"Library and data preparation","title":"Power analysis for selected genes","text":"Given raw count data, scDesignPop can also perform simulation-based power analysis specific gene-SNP pair across cell types expression count data. list data required input. done using constructDataPop function. SingleCellExperiment object eqtlgeno dataframe two main inputs needed. eqtlgeno dataframe consists eQTL annotations (must cell state, gene, SNP, chromosome, position columns minimum), genotypes across individuals (columns) every SNP (rows). structure example eqtlgeno dataframe given .","code":"library(scDesignPop) library(SingleCellExperiment) load(\"/home/ycen/proj/scEQTLsim/data/tutorials/example_sce.rda\") load(\"/home/ycen/proj/scEQTLsim/data/tutorials/example_eqtlgeno.rda\") example_sce_sel <- example_sce[c(\"ENSG00000163221\",\"ENSG00000135218\"),] example_eqtlgeno_sel <- example_eqtlgeno[     which(example_eqtlgeno$gene_id%in%c(\"ENSG00000163221\",\"ENSG00000135218\")),] data_list_sel <- constructDataPop(     sce = example_sce_sel,     eqtlgeno_df = example_eqtlgeno_sel,     new_covariate = as.data.frame(colData(example_sce_sel)),     overlap_features = NULL,     sampid_vec = NULL,     ct_copula = TRUE,     slot_name = \"counts\",     snp_model = \"single\",     cellstate_colname = \"cell_type\",     feature_colname = \"gene_id\",     snp_colname = \"snp_id\",     loc_colname = \"POS\",     chrom_colname = \"CHR\",     indiv_colname = \"indiv\",     prune_thres = 0.9     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-selected.html","id":"fitting-the-marginal-model","dir":"Articles","previous_headings":"","what":"Fitting the marginal model","title":"Power analysis for selected genes","text":"Next, marginal model specified fit gene using fitMarginalPop function. use Negative Binominal parametric model using \"nb\".","code":"marginal_list_sel <- fitMarginalPop(     data_list = data_list_sel,     mean_formula = \"(1|indiv) + cell_type\",     model_family = \"nb\",     interact_colnames = \"cell_type\",     parallelization = \"pbmcapply\",     n_threads = 1L,     loc_colname = \"POS\",     snp_colname = \"snp_id\",     cellstate_colname = \"cell_type\",     indiv_colname = \"indiv\",     filter_snps = TRUE,     snpvar_thres = 0,     force_formula = FALSE,     data_maxsize = 1     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-selected.html","id":"performing-power-analysis","dir":"Articles","previous_headings":"","what":"Performing power analysis","title":"Power analysis for selected genes","text":"Given fitted marginal model, scDesignPop can perform simulation-based power analysis specific gene-SNP pair across selected cell types using runPowerAnalysis function. Based previous naming covariates, specify fitted snpid \"1:153337943\", name column fixed cell state effect random individual effect \"cell_type\" \"indiv\" input parameters. check namings, can call covariate data frame using marginal_list_sel[[\"ENSG00000163221\"]]$fit$frame. selected cell types testing specified cellstate_vector consistent covariate data frame. Particarly, parameters snp_number gene_number used account multiple testing correction Bonferroni correction. Parameter methods used specify marginal eQTL model c(\"nb\", \"poisson\", \"gaussian\", \"pseudoBulkLinear\"). Parameter nindivs ncells used specify number individuals number cells per individual, can analyze performance power analysis find optimal setting.","code":"set.seed(123) power_data <- runPowerAnalysis(marginal_list = marginal_list_sel,                                geneid = \"ENSG00000163221\",                                snpid = \"1:153337943\",                                cellstate_colname = \"cell_type\",                                cellstate_vector = c(\"bmem\", \"monoc\"),                                indiv_colname = \"indiv\",                                methods = c(\"poisson\",\"pseudoBulkLinear\"),                                nindivs = c(50, 200),                                ncells = c(10, 50),                                alpha = 0.05,                                power_nsim = 50,                                snp_number = 10,                                gene_number = 200,                                CI_nsim = 1000,                                CI_conf = 0.05,                                ncores = 50L) #> [1] -4.160949 #> [1] -0.5727631 #> [1] 1.803924 #> [1] -0.02272728 #> [1] -4.160949 #> [1] -0.5727631 #> [1] 1.803924 #> [1] -0.02272728"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop-power-analysis-selected.html","id":"visualization-of-power-results","dir":"Articles","previous_headings":"","what":"Visualization of power results","title":"Power analysis for selected genes","text":"power analysis results can visualized using visualizePowerResult function. cell type names cellstate_vector input parameters must included power analysis.  swaping x y axis, can show result different way.","code":"visualizePowerResult(power_result = power_data,                      cellstate_vector = c(\"bmem\", \"monoc\"),                      x_axis = \"nindiv\",                      y_axis = \"ncell\",                      col_group = \"method\",                      geneid = \"ENSG00000163221\",                      snpid = \"1:153337943\") visualizePowerResult(power_result = power_data,                      cellstate_vector = c(\"bmem\", \"monoc\"),                      x_axis = \"ncell\",                      y_axis = \"nindiv\",                      col_group = \"method\",                      geneid = \"ENSG00000163221\",                      snpid = \"1:153337943\")"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"scDesignPop Quickstart","text":"scDesignPop simulator population-scale single-cell RNA-sequencing (scRNA-seq) data. information, please check Articles website: (https://chrisycd.github.io/scDesignPop/docs/index.html).","code":""},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-1-construct-a-data-list","dir":"Articles","previous_headings":"","what":"Step 1: construct a data list","title":"scDesignPop Quickstart","text":"run scDesignPop, list data required input. done using constructDataPop function. SingleCellExperiment object eqtlgeno dataframe two main inputs needed. eqtlgeno dataframe consists eQTL annotations (must cell state, gene, SNP, chromosome, position columns minimum), genotypes across individuals (columns) every SNP (rows). structure example eqtlgeno dataframe given .","code":"load(\"/home/ycen/proj/scEQTLsim/data/tutorials/example_sce.rda\") load(\"/home/ycen/proj/scEQTLsim/data/tutorials/example_eqtlgeno.rda\") data_list <- constructDataPop(     sce = example_sce,     eqtlgeno_df = example_eqtlgeno,     new_covariate = as.data.frame(colData(example_sce)),     overlap_features = NULL,     sampid_vec = NULL,     ct_copula = TRUE,     slot_name = \"counts\",     snp_model = \"single\",     cellstate_colname = \"cell_type\",     feature_colname = \"gene_id\",     snp_colname = \"snp_id\",     loc_colname = \"POS\",     chrom_colname = \"CHR\",     indiv_colname = \"indiv\",     prune_thres = 0.9     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-2-fit-marginal-model","dir":"Articles","previous_headings":"","what":"Step 2: fit marginal model","title":"scDesignPop Quickstart","text":"Next, marginal model specified fit gene using fitMarginalPop function. use Negative Binominal parametric model using \"nb\".","code":"marginal_list <- fitMarginalPop(     data_list = data_list,     mean_formula = \"(1|indiv) + cell_type\",     model_family = \"nb\",     interact_colnames = \"cell_type\",     parallelization = \"pbmcapply\",     n_threads = 20L,     loc_colname = \"POS\",     snp_colname = \"snp_id\",     cellstate_colname = \"cell_type\",     indiv_colname = \"indiv\",     filter_snps = TRUE,     snpvar_thres = 0,     force_formula = FALSE,     data_maxsize = 1     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-3-fit-a-gaussian-copula","dir":"Articles","previous_headings":"","what":"Step 3: fit a Gaussian copula","title":"scDesignPop Quickstart","text":"third step fit Gaussian copula using fitCopulaPop function.","code":"set.seed(123, kind = \"L'Ecuyer-CMRG\")  copula_fit <- fitCopulaPop(     sce = example_sce,     assay_use = \"counts\",     input_data = data_list[[\"new_covariate\"]],     marginal_list = marginal_list,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2L,     parallelization = \"mcmapply\"     )  RNGkind(\"Mersenne-Twister\")  # reset"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-4-extract-parameters","dir":"Articles","previous_headings":"","what":"Step 4: extract parameters","title":"scDesignPop Quickstart","text":"fourth step compute mean, sigma, zero probability parameters using extractParaPop function.","code":"para_new <- extractParaPop(     sce = example_sce,     assay_use = \"counts\",     marginal_list = marginal_list,     n_cores = 2L,     family_use = \"nb\",     indiv_colname = \"indiv\",     new_covariate = data_list[[\"new_covariate\"]],     new_eqtl_geno_list = data_list[[\"eqtl_geno_list\"]],     data = data_list[[\"covariate\"]],     parallelization = \"pbmcmapply\"     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-5-simulate-counts","dir":"Articles","previous_headings":"","what":"Step 5: simulate counts","title":"scDesignPop Quickstart","text":"fifth step simulate counts using simuNewPop function.","code":"set.seed(123)  newcount_mat <- simuNewPop(     sce = example_sce,     mean_mat = para_new[[\"mean_mat\"]],     sigma_mat = para_new[[\"sigma_mat\"]],     zero_mat = para_new[[\"zero_mat\"]],     quantile_mat = NULL,     copula_list = copula_fit[[\"copula_list\"]],     n_cores = 2L,     family_use = \"nb\",     nonnegative = TRUE,     input_data = data_list[[\"covariate\"]],     new_covariate = data_list[[\"new_covariate\"]],     important_feature = copula_fit[[\"important_feature\"]],     filtered_gene = data_list[[\"filtered_gene\"]],     parallelization = \"pbmcmapply\"     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-6-create-singlecellexperiment-object-using-simulated-data","dir":"Articles","previous_headings":"","what":"Step 6: create SingleCellExperiment object using simulated data","title":"scDesignPop Quickstart","text":"simulating data, can create SingleCellExperiment object follows.","code":"simu_sce <- SingleCellExperiment(list(counts = newcount_mat),                                   colData = data_list[[\"new_covariate\"]]) names(assays(simu_sce)) <- \"counts\"  # save gene meta data rowData(simu_sce) <- rowData(example_sce)"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-7-visualize-using-umap","dir":"Articles","previous_headings":"","what":"Step 7: visualize using UMAP","title":"scDesignPop Quickstart","text":"simulated data can visualized using UMAP plot follows.","code":"logcounts(simu_sce) <- log1p(counts(simu_sce)) set.seed(123) compare_figure <- scDesignPop::plotReducedDimPop(     ref_sce = example_sce,     sce_list = list(simu_sce),      name_vec = c(\"Reference\", \"scDesignPop\"),     assay_use = \"logcounts\",      if_plot = TRUE,      color_by = \"cell_type\", point_size = 1,     n_pc = 30) plot(compare_figure$p_umap)"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"scDesignPop Quickstart","text":"","code":"sessionInfo() #> R version 4.2.3 (2023-03-15) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] scater_1.26.1               ggplot2_3.5.1               #>  [3] scuttle_1.8.4               SingleCellExperiment_1.20.1 #>  [5] SummarizedExperiment_1.28.0 Biobase_2.58.0              #>  [7] GenomicRanges_1.50.2        GenomeInfoDb_1.34.9         #>  [9] IRanges_2.32.0              S4Vectors_0.36.2            #> [11] BiocGenerics_0.44.0         MatrixGenerics_1.10.0       #> [13] matrixStats_1.3.0           scDesignPop_0.0.0.9005      #> [15] BiocStyle_2.26.0            #>  #> loaded via a namespace (and not attached): #>  [1] nlme_3.1-164              bitops_1.0-7              #>  [3] fs_1.6.4                  RcppAnnoy_0.0.22          #>  [5] numDeriv_2016.8-1.1       tools_4.2.3               #>  [7] TMB_1.9.11                bslib_0.7.0               #>  [9] utf8_1.2.4                R6_2.5.1                  #> [11] irlba_2.3.5.1             vipor_0.4.7               #> [13] uwot_0.2.2                mgcv_1.9-1                #> [15] colorspace_2.1-0          withr_3.0.0               #> [17] tidyselect_1.2.1          gridExtra_2.3             #> [19] compiler_4.2.3            textshaping_0.4.0         #> [21] cli_3.6.2                 BiocNeighbors_1.16.0      #> [23] desc_1.4.3                DelayedArray_0.24.0       #> [25] labeling_0.4.3            bookdown_0.43             #> [27] sass_0.4.9                scales_1.3.0              #> [29] mvtnorm_1.3-1             pbapply_1.7-2             #> [31] pkgdown_2.1.1             systemfonts_1.1.0         #> [33] digest_0.6.35             minqa_1.2.7               #> [35] rmarkdown_2.27            RhpcBLASctl_0.23-42       #> [37] XVector_0.38.0            pkgconfig_2.0.3           #> [39] htmltools_0.5.8.1         lme4_1.1-35.3             #> [41] sparseMatrixStats_1.10.0  highr_0.11                #> [43] fastmap_1.2.0             htmlwidgets_1.6.4         #> [45] rlang_1.1.4               rstudioapi_0.16.0         #> [47] DelayedMatrixStats_1.20.0 farver_2.1.2              #> [49] jquerylib_0.1.4           generics_0.1.3            #> [51] jsonlite_1.8.8            BiocParallel_1.32.6       #> [53] dplyr_1.1.4               RCurl_1.98-1.14           #> [55] magrittr_2.0.3            BiocSingular_1.14.0       #> [57] GenomeInfoDbData_1.2.9    Matrix_1.6-5              #> [59] Rcpp_1.0.14               ggbeeswarm_0.7.2          #> [61] munsell_0.5.1             fansi_1.0.6               #> [63] viridis_0.6.5             lifecycle_1.0.4           #> [65] yaml_2.3.8                MASS_7.3-58.2             #> [67] zlibbioc_1.44.0           grid_4.2.3                #> [69] parallel_4.2.3            ggrepel_0.9.5             #> [71] lattice_0.22-6            beachmat_2.14.2           #> [73] splines_4.2.3             knitr_1.47                #> [75] pillar_1.9.0              boot_1.3-30               #> [77] codetools_0.2-20          ScaledMatrix_1.6.0        #> [79] glue_1.8.0                evaluate_0.24.0           #> [81] BiocManager_1.30.23       nloptr_2.0.3              #> [83] vctrs_0.6.5               gtable_0.3.5              #> [85] assertthat_0.2.1          cachem_1.1.0              #> [87] xfun_0.52                 rsvd_1.0.5                #> [89] ragg_1.3.2                viridisLite_0.4.2         #> [91] tibble_3.2.1              pbmcapply_1.5.1           #> [93] glmmTMB_1.1.9             beeswarm_0.4.0"},{"path":"https://github.com/chrisycd/scDesignPop/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chris Y. Dong. Author, maintainer. Yihui Cen. Author.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Y. Dong C, Cen Y (2025). scDesignPop: Simulator population-scale single-cell expression RNA-sequencing data. R package version 0.0.0.9005, https://github.com/chrisycd/scDesignPop.","code":"@Manual{,   title = {scDesignPop: Simulator for population-scale single-cell expression RNA-sequencing data},   author = {Chris {Y. Dong} and Yihui Cen},   year = {2025},   note = {R package version 0.0.0.9005},   url = {https://github.com/chrisycd/scDesignPop}, }"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"scdesignpop","dir":"","previous_headings":"","what":"scDesignPop","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"scDesignPop simulator population-scale single-cell RNA-sequencing (scRNA-seq) data. incorporating eQTL effects genotype data covariates, scDesignPop several key applications: performing eQTL power analyses cell-type resolution, protecting genomic privacy mitigating eQTL-based re-identification individuals via linking attacks, simulating scRNA-seq data new individuals using either simulated real genotype data, generating positive- negative-control data cell-type-specific eQTLs. Detailed tutorials illustrate various functionalities scDesignPop available website. following illustration figure summarizes workflow scDesignPop:","code":""},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Simulator for population-scale single-cell expression RNA-sequencing data","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"Installation Quick Start Tutorials Contact Related Manuscripts","code":""},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"can install development version scDesignPop GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"chrisycd/scDesignPop\")"},{"path":[]},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"detailed tutorials, please check website. tutorials demonstrate applications scDesignPop following perspectives: preprocessing, data simulation, model alteration, power analysis. Preprocessing Data simulation Model cell type proportions new individuals Model alteration Modify eQTL effect eGenes / non-eGenes Power Analysis Power analysis based fitted scDesignPop marginal model Power analysis selected genes","code":""},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"questions advice scDesignPop welcomed! Please report issues, contact Chris Dong (cycd@g.ucla.edu) Yihui Cen (yihuicen@g.ucla.edu).","code":""},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"related-manuscripts","dir":"","previous_headings":"","what":"Related Manuscripts","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"original scDesignPop paper simulator general single-cell counts: scDesign3 scDesign3: Song, D., Wang, Q., Yan, G. et al. scDesign3 generates realistic silico data multimodal single-cell spatial omics. Nat Biotechnol 42, 247–252 (2024). predecessors scDesign3 scDesign: Li, W. V., & Li, J. J. (2019). statistical simulator scDesign rational scRNA-seq experimental design. Bioinformatics, 35(14), i41-i50. scDesign2: Sun, T., Song, D., Li, W. V., & Li, J. J. (2021). scDesign2: transparent simulator generates high-fidelity single-cell gene expression count data gene correlations captured. Genome biology, 22(1), 1-37. simulator single-cell multi-omics reads developed lab member Guanao Yan scReadSim: Yan, G., Song, D. & Li, J.J. scReadSim: single-cell RNA-seq ATAC-seq read simulator. Nat Commun 14, 7482 (2023)","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gam.html","id":null,"dir":"Reference","previous_headings":"","what":"A calcParaVectors Method for gam (mgcv package) Objects — calcParaVectors.gam","title":"A calcParaVectors Method for gam (mgcv package) Objects — calcParaVectors.gam","text":"calcParaVectors Method gam (mgcv package) Objects","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A calcParaVectors Method for gam (mgcv package) Objects — calcParaVectors.gam","text":"","code":"# S3 method for class 'gam' calcParaVectors(fit, family_use, new_covariate, total_cells, ...)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A calcParaVectors Method for gam (mgcv package) Objects — calcParaVectors.gam","text":"fit add later family_use add later new_covariate add later total_cells add later ... Additional arguments passed calcParaVectors S3 method functions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gamlss.html","id":null,"dir":"Reference","previous_headings":"","what":"A calcParaVectors Method for gamlss Objects — calcParaVectors.gamlss","title":"A calcParaVectors Method for gamlss Objects — calcParaVectors.gamlss","text":"calcParaVectors Method gamlss Objects","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gamlss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A calcParaVectors Method for gamlss Objects — calcParaVectors.gamlss","text":"","code":"# S3 method for class 'gamlss' calcParaVectors(fit, family_use, new_covariate, total_cells, data, ...)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gamlss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A calcParaVectors Method for gamlss Objects — calcParaVectors.gamlss","text":"fit add later family_use add later new_covariate add later total_cells add later data add later ... Additional arguments passed calcParaVectors S3 method functions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.glmmTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"A calcParaVectors Method for glmmTMB Objects — calcParaVectors.glmmTMB","title":"A calcParaVectors Method for glmmTMB Objects — calcParaVectors.glmmTMB","text":"calcParaVectors Method glmmTMB Objects","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.glmmTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A calcParaVectors Method for glmmTMB Objects — calcParaVectors.glmmTMB","text":"","code":"# S3 method for class 'glmmTMB' calcParaVectors(fit, family_use, new_covariate, total_cells, ...)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.glmmTMB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A calcParaVectors Method for glmmTMB Objects — calcParaVectors.glmmTMB","text":"fit add later family_use add later new_covariate add later total_cells add later ... Additional arguments passed calcParaVectors S3 method functions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to compute model parameter vectors — calcParaVectors","title":"Generic function to compute model parameter vectors — calcParaVectors","text":"S3 generic function computing model parameters without new covariate feature","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to compute model parameter vectors — calcParaVectors","text":"","code":"calcParaVectors(fit, family_use, new_covariate, total_cells, data, ...)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to compute model parameter vectors — calcParaVectors","text":"fit add later family_use add later new_covariate add later total_cells add later data add later ... Additional arguments passed calcParaVectors S3 method functions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":null,"dir":"Reference","previous_headings":"","what":"Check membership of first vector compared to other vectors — checkVectorContain","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"internal helper function check elements first vector subsets one vectors. Ordering elements ignored.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"","code":"checkVectorContain(..., ignore_dups = FALSE)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"... arguments two vectors. ignore_dups logical scalar disregard duplicate elements comparison. Default FALSE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"logical scalar","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"","code":"vec1 <- c(\"cherry\", \"apple\", \"cherry\") vec2 <- c(\"apple\", \"cherry\", \"banana\", \"cherry\") vec3 <- c(\"banana\", \"kiwi\", \"apple\", \"cherry\") vec4 <- c(\"banana\", \"apple\", \"apple\", \"cherry\")  checkVectorContain(vec1, vec2, vec3, ignore_dups = TRUE)   # returns TRUE #> [1] TRUE checkVectorContain(vec1, vec2, vec4, ignore_dups = FALSE)  # returns FALSE #> [1] TRUE"},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if multiple vectors have same elements — checkVectorEqual","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"internal helper function check two vectors elements (order considered option).","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"","code":"checkVectorEqual(..., ignore_order = TRUE)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"... arguments two vectors. ignore_order logical scalar disregard ordering elements input vectors. Default TRUE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"logical scalar","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"","code":"vec1 <- c(\"cherry\", \"apple\", \"banana\", \"cherry\") vec2 <- c(\"cherry\", \"apple\", \"cherry\", \"banana\") vec3 <- c(\"banana\", \"cherry\", \"apple\", \"cherry\")  checkVectorEqual(vec1, vec2, vec3, ignore_order = TRUE)  # returns TRUE #> [1] TRUE checkVectorEqual(vec1, vec2, vec3, ignore_order = FALSE)  # returns FALSE #> [1] FALSE"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a list of input data — constructDataPop","title":"Construct a list of input data — constructDataPop","text":"Function extracts expression matrix, cell covariates, filters SNPs eQTL genotype dataframe.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a list of input data — constructDataPop","text":"","code":"constructDataPop(   sce,   eqtlgeno_df,   new_eqtlgeno_df = NULL,   new_covariate = NULL,   overlap_features = NULL,   sampid_vec = NULL,   ct_copula = TRUE,   slot_name = \"counts\",   snp_model = c(\"single\", \"multi\"),   cellstate_colname = \"cell_type\",   feature_colname = \"gene_id\",   snp_colname = \"snp_id\",   loc_colname = \"POS\",   chrom_colname = \"CHR\",   indiv_colname = \"indiv\",   prune_thres = 0.9 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a list of input data — constructDataPop","text":"sce SingleCellExperiment object. eqtlgeno_df dataframe eQTL annotations SNP genotypes gene. new_eqtlgeno_df dataframe eQTL annotations SNP genotypes gene new individuals. default NULL. new_covariate cell covariate dataframe simulate. default NULL. overlap_features optional string vector filter features (ie. genes). default NULL. sampid_vec optional string vector filter sample ids. default NULL. ct_copula logical scalar whether fit copula cell state variable specified cellstate_colname option. default TRUE. slot_name string scalar specifying slot use input sce. default \"counts\". snp_model string scalar specifying type SNP model used. Options either \"single\" single-SNP, \"multi\" multi-SNP. cellstate_colname string scalar specifying cell state variable eqtlgeno_df cell covariate sce object. default \"cell_type\". feature_colname string scalar specifying feature variable (ie. genes) eqtlgeno_df. default \"gene_id\". snp_colname string scalar SNP variable eqtlgeno_df. default \"snp_id\". loc_colname string scalar last column eQTL annotation eqtlgeno_df. default \"POS\". chrom_colname string scalar chromosome variable eqtlgeno_df. default \"CHR\". indiv_colname string scalar sample ID variable cell covariate sce. default \"indiv\". prune_thres numerical value 0 1 used threshold pairwise correlations eQTLs' genotypes feature. default value 0.9.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a list of input data — constructDataPop","text":"outputs list following elements: count_mat cell--gene matrix response values. covariate cell--covariate data frame used fit marginal. new_covariate optional cell--covariate data frame used prediction. important_features string vector gene ids. eqtl_geno_list list eQTL genotype dataframes gene (fit marginal). new_eqtl_geno_list optional list eQTL genotype dataframes gene (new individual simulation). filtered_gene string vector features QC filtered.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a list of input data — constructDataPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Design Matrix Dataframe — constructDesignMatrix","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"helper function constructs design matrix using given feature's expression vector every cell, eQTL genotype dataframe (optional), cell covariate dataframe.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"","code":"constructDesignMatrix(   response_vec,   cellcov_df,   eqtlgeno_df,   loc_colname = \"POS\",   snp_colname = \"snp_id\",   indiv_colname = \"indiv\",   filter_snps = TRUE,   snpvar_thres = 0,   cleanup = TRUE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"response_vec vector values response variable. cellcov_df cell--covariates dataframe containing covariates (explanatory variables) cells. eqtlgeno_df SNP--sample genotype dataframe containing feature's eQTL annotations SNP genotypes (explanatory variables) samples (ie. individuals). loc_colname string scalar column name SNP position variable. snp_colname string scalar column name SNP id variable. indiv_colname string scalar column name individuals (samples). filter_snps logical scalar whether filter SNP covariates either low-variance 1 distinct genotype (ie. 1's) prior fitting model. snpvar_thres numeric scalar (0 1) used filter SNPs whose variance genotypes across samples threshold. Used together filter_snps = TRUE. cleanup logical scalar whether clean variables constructing dmat_df.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"list containing following: dmat_df dataframe design matrix containing covariates (cell covariates eQTL genotype covariates) given feature. snp_cov string scalar vector SNP ids design matrix.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"response_vec provided, function constructs full design matrix dataframe (ie. response variable), whereas covariate dataframe constructed response_vec = NULL.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"function creates combined dataframe using input eQTL annotations, sample genotype dataframe.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"","code":"constructEqtlGeno(   eqtl_annot_df,   geno_df,   sampid_vec,   name = NULL,   feature_colname = \"gene_name\",   cellstate_colname = \"cell_type\",   snp_colname = \"snp_id\",   loc_colname = \"POS\" )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"eqtl_annot_df eQTL annotation dataframe geno_df eQTL sample genotype dataframe sampid_vec sample id vector name string integer scalar identify input feature_colname feature variable name cellstate_colname cell state variable name snp_colname SNP id variable name loc_colname SNP position variable name","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"dataframe eQTL annotations genotype SNPs","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a Model Formula — constructFormula","title":"Constructs a Model Formula — constructFormula","text":"helper function specifies formula marginal model.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a Model Formula — constructFormula","text":"","code":"constructFormula(   model_formula,   interact_colnames = NULL,   snp_cov = NULL,   force_formula = FALSE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a Model Formula — constructFormula","text":"model_formula string scalar specify model formula, including random effects () without SNP genotypes SNP genotype interaction effects. interact_colnames string scalar vector variable names first-order interaction SNP genotypes. snp_cov string scalar vector specifies SNP covariates used model. force_formula logical scalar whether bypass model parsimony check. force_formula = TRUE, interaction terms whose covariates main effects model permitted. Results error force_formula = FALSE length(geno_interact_names) > 0.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs a Model Formula — constructFormula","text":"formula object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructs a Model Formula — constructFormula","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a model formula for power analysis — constructPAFormula","title":"Construct a model formula for power analysis — constructPAFormula","text":"Construct model formula power analysis","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a model formula for power analysis — constructPAFormula","text":"","code":"constructPAFormula(   fm,   method = c(\"nb\", \"poisson\", \"gaussian\", \"pseudoBulkLinear\"),   snpid = NULL,   cellstate_colname = NULL )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a model formula for power analysis — constructPAFormula","text":"fm stats::formula object full marginal model. method character object specifying method analyzed power. (Options: nb,poisson,gaussian,pseudoBulkLinear). snpid character object contains snpid. cellstate_colname string scalar specifying cell state variable default \"cell_type\".","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a model formula for power analysis — constructPAFormula","text":"stats::formula object power analysis specified type.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a model formula for power analysis — constructPAFormula","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"Construct SingleCellExperiment object specified covariates.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"","code":"constructSCE(   data_obj,   cellcov_df = NULL,   featcov_df = NULL,   cellcov_names,   sampid_vec = NULL,   overlap_features = NULL,   assay_name = \"RNA\",   slot_name = \"counts\",   sce_name = slot_name,   indiv_colname = \"indiv\",   cellstate_colname = \"cell_type\",   factor_colnames = NULL,   cellcov_renames = cellcov_names )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"data_obj Seurat, SingleCellExperiment, expression matrix (gene--cell) used construct new SingleCellExperiment object. cellcov_df dataframe containing covariates cells. Row names must cell names match data_obj. used data_obj matrix object. featcov_df dataframe containing covariates features (ie genes). Row names must feature names match data_obj. used data_obj matrix object. cellcov_names string vector columns extract cell covariates. sampid_vec optional string vector sample ids (individuals). Default NULL. provided, must match sample ids found data_obj. overlap_features optional string vector features filter data_obj. Default NULL. provided, features must present data_obj. assay_name string scalar name Seurat object slot interest. used data_obj Seurat object. slot_name string scalar type assay data (either 'logcounts' 'counts'). Default 'counts'. used data_obj Seurat SingleCellExperiment object. sce_name string scalar type assay data output SingleCellExperiment. indiv_colname string scalar sample id colname. Must present cellcov_df data_obj. Default 'indiv'. cellstate_colname string scalar cell state colname. Must present cellcov_df data_obj. Default 'cell_type'. factor_colnames optional string vector scalar columns coerce factor variables. Default NULL. provided, must present cellcov_df data_obj. cellcov_renames optional string vector rename cell covariates. Must length cellcov_names. Default cellcov_names.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"SingleCellExperiment object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_eqtlgeno.html","id":null,"dir":"Reference","previous_headings":"","what":"A dataframe containing both eQTL annotations and genotypes of individuals — example_eqtlgeno","title":"A dataframe containing both eQTL annotations and genotypes of individuals — example_eqtlgeno","text":"subset data OneK1K dataset whose individual ids anonymized, simulated genotypes.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_eqtlgeno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dataframe containing both eQTL annotations and genotypes of individuals — example_eqtlgeno","text":"","code":"data(\"example_eqtlgeno\")"},{"path":[]},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_eqtlgeno.html","id":"example-eqtlgeno","dir":"Reference","previous_headings":"","what":"example_eqtlgeno","title":"A dataframe containing both eQTL annotations and genotypes of individuals — example_eqtlgeno","text":"data frame 270 cell-type specific eQTLs (rows), 5 eQTL relevant annotations (cols) consisting cell_type, gene_id, snp_id, CHR, POS, 20 samples' genotypes (cols). cell_type Abbreviated cell type gene_id Gene ID snp_id SNP id cell-type specific eQTL CHR Chromosome POS Chromosome location SNP","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A SingleCellExperiment object containing both cell type and individual id — example_sce","title":"A SingleCellExperiment object containing both cell type and individual id — example_sce","text":"subset scRNA-seq data OneK1K cohort anonymized.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A SingleCellExperiment object containing both cell type and individual id — example_sce","text":"","code":"data(\"example_sce\")"},{"path":[]},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_sce.html","id":"example-sce","dir":"Reference","previous_headings":"","what":"example_sce","title":"A SingleCellExperiment object containing both cell type and individual id — example_sce","text":"data frame 100 genes (rows) 17,918 cells (cols) 20 individuals : cell_type Cell type indiv Individual id","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data from SingleCellExperiment object — extractFromSCE","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"Extract data SingleCellExperiment object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"","code":"extractFromSCE(   sce_obj,   features = NULL,   slot_name = \"counts\",   indiv_colname = \"indiv\",   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"sce_obj SingleCellExperiment object features string vector filter features slot_name string scalar specify type input assay data indiv_colname string scalar specify column indiv ids ... options specify extracted outputs","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"list extracted data","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data from Seurat object — extractFromSeurat","title":"Extract data from Seurat object — extractFromSeurat","text":"Extract data Seurat object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data from Seurat object — extractFromSeurat","text":"","code":"extractFromSeurat(   seurat_obj,   features = NULL,   assay_name = \"RNA\",   slot_name = \"counts\",   indiv_colname = \"indiv\",   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data from Seurat object — extractFromSeurat","text":"seurat_obj Seurat object features string vector filter features assay_name string scalar specify name input assay data slot_name string scalar specify type input assay data indiv_colname string scalar specify column indiv ids ... options specify extracted outputs. Currently available: col_class : logical value feat_names : logical value cell_names : logical value sc_indiv : logical value expr_mat : logical value sc_cov : logical value feat_cov : logical value","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data from Seurat object — extractFromSeurat","text":"list extracted data following optional outputs: col_class : vector column classes cell covariate variables feat_names : vector feature names cell_names : vector cell names sc_indiv : vector distinct sample ids extracted cell covariate using indiv_colname expr_mat : expression matrix extracted using assay_name slot_name options sc_cov : dataframe cell covariates feat_cov : dataframe feature covariates","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract data from Seurat object — extractFromSeurat","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract parameter matrix for new covariate df — extractParaPop","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"main function.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"","code":"extractParaPop(   sce,   assay_use = \"counts\",   marginal_list,   n_cores,   family_use,   new_covariate,   new_eqtl_geno_list,   indiv_colname = \"indiv\",   snp_colname = \"snp_id\",   loc_colname = \"POS\",   parallelization = \"mcmapply\",   BPPARAM = NULL,   data )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"sce add later assay_use add later marginal_list add later n_cores add later family_use string scalar vector marginal distribution used. new_covariate cell--feature covariate dataframe (construct_data.R) plus corr_group. new_eqtl_geno_list list eQTL genotype dataframes gene (predicted). indiv_colname add later snp_colname add later loc_colname add later parallelization add later BPPARAM add later data cell--feature covariate dataframe (construct_data.R) plus corr_group. Used gamlss fits.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"list mean, sigma, zero parameter cell feature matrices:","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits copula for input — fitCopulaPop","title":"Fits copula for input — fitCopulaPop","text":"Fits copula input","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits copula for input — fitCopulaPop","text":"","code":"fitCopulaPop(   sce,   assay_use,   input_data,   marginal_list,   family_use,   copula = \"gaussian\",   DT = TRUE,   pseudo_obs = FALSE,   epsilon = 1e-06,   family_set = c(\"gaussian\", \"indep\"),   important_feature = \"all\",   n_cores,   parallelization = \"mcmapply\",   BPPARAM = NULL )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits copula for input — fitCopulaPop","text":"sce add later assay_use add later input_data add later marginal_list add later family_use add later copula add later DT add later pseudo_obs add later epsilon add later family_set add later important_feature add later n_cores add later parallelization add later BPPARAM add later","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits copula for input — fitCopulaPop","text":"list","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits copula for input — fitCopulaPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit marginal models for every feature — fitMarginalPop","title":"Fit marginal models for every feature — fitMarginalPop","text":"Fits specified parametric model using various input parameters.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit marginal models for every feature — fitMarginalPop","text":"","code":"fitMarginalPop(   data_list,   mean_formula,   model_family = \"nb\",   interact_colnames = NULL,   parallelization = \"pbmcapply\",   n_threads = 2L,   loc_colname = \"POS\",   snp_colname = \"snp_id\",   cellstate_colname = \"cell_type\",   indiv_colname = \"indiv\",   filter_snps = TRUE,   snpvar_thres = 0,   force_formula = FALSE,   data_maxsize = 1,   keep_cellnames = FALSE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit marginal models for every feature — fitMarginalPop","text":"data_list list input data. mean_formula string scalar specify mean formula, including random effects () without SNP genotypes SNP genotype interaction effects. model_family string scalar specify model fitting used. interact_colnames string scalar vector variable names first-order interaction SNP genotypes. parallelization string scalar specifying type parallelization used marginal fitting. n_threads positive integer value (greater equal 1) specify number CPU threads used parallelization. loc_colname string scalar column name SNP position variable. snp_colname string scalar column name SNP id variable. cellstate_colname string scalar column name cell state (ie. cell type). indiv_colname string scalar column name individuals (samples). filter_snps logical scalar whether filter SNP covariates either low-variance 1 distinct genotype (ie. 1's) prior fitting model. snpvar_thres numeric scalar (0 1) used filter SNPs whose variance genotypes across samples threshold. Used together filter_snps = TRUE. force_formula logical scalar whether bypass model parsimony check. force_formula = TRUE, interaction terms whose covariates main effects model permitted. Results error force_formula = FALSE length(geno_interact_names) > 0. data_maxsize positive numeric value used set max data_list size GiB unit. Used parallelization = 'future'. keep_cellnames logical scalar whether keep cell barcode names. keep_cellnames = TRUE, memory larger. default FALSE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit marginal models for every feature — fitMarginalPop","text":"list named features, containing list following items: fit glmmTMB fit object. time numeric scalar elapsed time fit given feature. snp_cov string scalar vector SNP ids used fit given feature. model_attr list attributes extracted model. currently implemented. removed_cell string scalar vector cell names removed due low-variance (currently implemented).","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit marginal models for every feature — fitMarginalPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Marginal Model — fitModel","title":"Fit a Marginal Model — fitModel","text":"Fits specified parametric model feature using response variable, eQTL genotype cell covariates explanatory variables.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Marginal Model — fitModel","text":"","code":"fitModel(   feature_name,   response_vec,   cellcov_df,   eqtlgeno_df,   mu_formula,   model_family = \"nb\",   interact_colnames = NULL,   loc_colname = \"POS\",   snp_colname = \"snp_id\",   cellstate_colname = \"cell_type\",   indiv_colname = \"indiv\",   filter_snps = TRUE,   snpvar_thres = 0,   force_formula = FALSE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Marginal Model — fitModel","text":"feature_name string scalar feature's name (ie. gene id). response_vec vector values response variable. cellcov_df cell--covariates dataframe containing covariates (explanatory variables) cells. eqtlgeno_df SNP--sample genotype dataframe containing feature's eQTL annotations SNP genotypes (explanatory variables) samples (ie. individuals). mu_formula string scalar specify mean formula, including random effects () without SNP genotypes SNP genotype interaction effects. model_family string scalar specify model fitting used. interact_colnames string scalar vector variable names first-order interaction SNP genotypes. loc_colname string scalar column name SNP position variable. snp_colname string scalar column name SNP id variable. cellstate_colname string scalar column name cell state (ie. cell type). indiv_colname string scalar column name individuals (samples). filter_snps logical scalar whether filter SNP covariates either low-variance 1 distinct genotype (ie. 1's) prior fitting model. snpvar_thres numeric scalar (0 1) used filter SNPs whose variance genotypes across samples threshold. Used together filter_snps = TRUE. force_formula logical scalar whether bypass model parsimony check. force_formula = TRUE, interaction terms whose covariates main effects model permitted. Results error force_formula = FALSE length(geno_interact_names) > 0.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Marginal Model — fitModel","text":"list containing fitted model object, elapsed time, SNP ids covariates, removed cells (currently implemented.)","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Marginal Model — fitModel","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a marginal model for power analysis — fitPAModel","title":"Fit a marginal model for power analysis — fitPAModel","text":"Fit marginal model power analysis","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a marginal model for power analysis — fitPAModel","text":"","code":"fitPAModel(   df,   model_formula,   idx,   method = c(\"nb\", \"poisson\", \"gaussian\", \"pseudoBulkLinear\"),   snpid,   indiv_colname )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a marginal model for power analysis — fitPAModel","text":"df data frame object contains design matrix. model_formula stats::formula object contains model formula power analysis. idx numeric value recording serial number simulation method character object specifying method analyzed power. (Options: nb,poisson,gaussian,pseudoBulkLinear). snpid character object contains snpid. indiv_colname string scalar sample ID variable cell covariate marginal_list[[geneid]]$frame. default \"indiv\".","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a marginal model for power analysis — fitPAModel","text":"fitted stats::model object.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a marginal model for power analysis — fitPAModel","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify marginal models — modifyMarginalModels","title":"Modify marginal models — modifyMarginalModels","text":"Modify marginal model parameters genes based user inputs cell-type-specific eQTLs.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify marginal models — modifyMarginalModels","text":"","code":"modifyMarginalModels(   marginal_list,   eqtlgeno_list,   features,   celltype,   neg_ctrl = FALSE,   mean_log2fc = 0,   eqtl_log2fc = mean_log2fc,   eqtl_reverse = FALSE,   mean_baseline = NULL,   eqtl_baseline = NULL,   mean_baseline_only = FALSE,   eqtl_baseline_only = FALSE,   disp_scaling = \"linear\",   cellstate_colname = \"cell_type\",   snp_colname = \"snp_id\",   verbose = TRUE,   debug = FALSE,   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify marginal models — modifyMarginalModels","text":"marginal_list list marginal model objects. eqtlgeno_list list eqtl genotypes. features scalar vector features (ie. genes) apply modifications. celltype string specify cell type make modification. neg_ctrl logical value whether set negative control eQTL (ie. non-eGene).  option sets conditional means identical across genotypes (0, 1, 2).  neg_ctrl = TRUE, mean_log2fc option still applied set, eqtl_log2fc overidden impact.  Default FALSE. mean_log2fc numeric scalar vector log2 fold-change parameter increase decrease conditional mean genotype 1 \\(\\mu_{1}\\) cell type. Default mean_log2fc = 0 (parameters modified uses estimated parameters fitted marginal model). eqtl_log2fc numeric scalar vector log2 fold-change parameter increase decrease slope eQTL effect celltype. eQTL slope defined difference conditional mean genotype 1 genotype 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)). Default eqtl_log2fc = mean_log2fc (eQTL slope scaled conditional mean log2 fold-change). eqtl_reverse logical value determine whether eQTL slope trends reverse direction (TRUE) (FALSE). Default FALSE. mean_baseline numeric value specify minimum conditional mean genotype 1 \\(\\mu_{1}\\).  mean_baseline_only = FALSE, conditional mean maximum fitted (estimated marginal model) mean_baseline value.  Otherwise, conditional mean set mean_baseline value.  Default value NULL. eqtl_baseline numeric value specify minimum eQTL slope genotype 1 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)).  eqtl_baseline_only = FALSE, eQTL slope maximum slope fitted (estimated marginal model) eqtl_baseline value.  Otherwise, eQTL slope set eqtl_baseline value.  Default value NULL. mean_baseline_only logical value force conditional mean (linear prediction) genotype 1 \\(\\mu_{1}\\). Default FALSE. eqtl_baseline_only logical value force eQTL slope genotype 1 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)). Default FALSE. disp_scaling string value specify dispersion-mean scaling certain parametric models. Current options either \"linear\", \"quadratic\", \"none\". (NOTE: currently applicable negative binomial model.) cellstate_colname string cell state variable name. snp_colname string SNP id variable name. verbose logical value whether output messages related modified parameters. Default TRUE. debug logical whether output mod_list list addition marginal_list. ... Additional options.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify marginal models — modifyMarginalModels","text":"list marginal models similar marginal_list input. debug = TRUE, output mod_list list containing intermediate objects addition marginal_list.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify marginal models — modifyMarginalModels","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify parameters of a glmmTMB model object — modifyModelPara","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"Modify parameters glmmTMB model object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"","code":"modifyModelPara(   model_obj,   eqtlgeno,   celltype,   neg_ctrl = FALSE,   mean_log2fc = 0,   eqtl_log2fc = mean_log2fc,   eqtl_reverse = FALSE,   mean_baseline = NULL,   eqtl_baseline = NULL,   mean_baseline_only = FALSE,   eqtl_baseline_only = FALSE,   disp_scaling = \"linear\",   cellstate_colname = \"cell_type\",   snp_colname = \"snp_id\",   verbose = TRUE,   debug = FALSE,   log_tol = 1e-04,   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"model_obj marginal model object gene. eqtlgeno dataframe eQTL annotations samples' genotype gene. celltype string specify cell type make modification. neg_ctrl logical value whether set negative control eQTL (ie. non-eGene).  option sets conditional means identical across genotypes (0, 1, 2).  neg_ctrl = TRUE, mean_log2fc option still applied set, eqtl_log2fc overidden impact.  Default FALSE. mean_log2fc numeric value log2 fold-change parameter increase decrease conditional mean genotype 1 \\(\\mu_{1}\\) cell type. Default mean_log2fc = 0 (parameters modified uses estimated parameters fitted marginal model). eqtl_log2fc numeric value log2 fold-change parameter increase decrease slope eQTL effect celltype. eQTL slope defined difference conditional mean genotype 1 genotype 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)). Default eqtl_log2fc = mean_log2fc (eQTL slope scaled conditional mean log2 fold-change). eqtl_reverse logical value determine whether eQTL slope trends reverse direction (TRUE) (FALSE). Default FALSE. mean_baseline numeric value specify minimum conditional mean genotype 1 \\(\\mu_{1}\\).  mean_baseline_only = FALSE, conditional mean maximum fitted (estimated marginal model) mean_baseline value.  Otherwise, conditional mean set mean_baseline value.  Default value NULL. eqtl_baseline numeric value specify minimum eQTL slope genotype 1 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)).  eqtl_baseline_only = FALSE, eQTL slope maximum slope fitted (estimated marginal model) eqtl_baseline value.  Otherwise, eQTL slope set eqtl_baseline value.  Default value NULL. mean_baseline_only logical value force conditional mean (linear prediction) genotype 1 \\(\\mu_{1}\\). Default FALSE. eqtl_baseline_only logical value force eQTL slope genotype 1 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)). Default FALSE. disp_scaling string value specify dispersion-mean scaling certain parametric models. Current options either \"linear\", \"quadratic\", \"none\". (NOTE: currently applicable negative binomial model.) cellstate_colname string cell state variable name. snp_colname string SNP id variable name. verbose logical value whether output messages related modified parameters. Default TRUE. debug logical value whether output intermediate objects used debugging purposes. Default FALSE. log_tol numeric value used tolerance log computation. Default value \\(1e-4\\). ... Additional options.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"list dataframe coefficients, model objects, optional outputs debugging enabled.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotCellProp.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the cell type proportions across individuals — plotCellProp","title":"Visualize the cell type proportions across individuals — plotCellProp","text":"Function visiualizes simulated output cell type proportion modelling function","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotCellProp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the cell type proportions across individuals — plotCellProp","text":"","code":"plotCellProp(   col_data,   title = NULL,   color_vec = NULL,   cellstate_colname = \"cell_type\",   indiv_colname = \"indiv\",   width = 1,   linewidth = 0.01 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotCellProp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the cell type proportions across individuals — plotCellProp","text":"col_data data frame two columns: individual ids column name indiv_colname, cell types column name cellstate_colname. title string scalar specifiying title output barplot. color_vec named vector color hex codes named ordered cell type names. NULL, cell types contained col_data ordered alphabetical order R default color schemes. cellstate_colname string scalar specify cell type variable col_data indiv_colname string scalar specify individual id variable col_data. width numeric scalar specifying width bar output barplot. linewidth numeric scalar specifying line width bar output barplot.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotCellProp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the cell type proportions across individuals — plotCellProp","text":"outputs ggplot2 object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotCellProp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the cell type proportions across individuals — plotCellProp","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotReducedDimPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensionality reduction and visualization for population-scale data — plotReducedDimPop","title":"Dimensionality reduction and visualization for population-scale data — plotReducedDimPop","text":"function takes reference sce list new sces, performs dimensionality reduction reference data, projects synthetic datasets low dimensional space (PCA UMAP) reference sce, visualize results.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotReducedDimPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensionality reduction and visualization for population-scale data — plotReducedDimPop","text":"","code":"plotReducedDimPop(   ref_sce,   sce_list,   name_vec,   assay_use = \"logcounts\",   pc_umap = TRUE,   n_pc = 50,   center = TRUE,   scale. = TRUE,   if_plot = TRUE,   shape_by = NULL,   color_by,   point_size = 1 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotReducedDimPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensionality reduction and visualization for population-scale data — plotReducedDimPop","text":"ref_sce reference sce object synthetic sce objects projected . sce_list list synthetic sce objects. name_vec string vector specifiying names dataset. length length(sce_list) + 1, first name ref_sce. assay_use string scalar indicates assay use sce. Default 'logcounts'. pc_umap boolean value specifying whether using PCs input UMAP. Default TRUE. n_pc integer specifying number PCs. center boolean value specifying whether centering data PCA. Default TRUE. scale. boolean value specifying whether scaling data PCA. Default TRUE. if_plot boolean value specifying whether returning plot. FALSE, return reduced dimensions dataset. shape_by string scalar indicates column colData used shape. color_by string scalar indicates column colData used color. point_size numeric scalar specifying point size final plot. Default 1.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotReducedDimPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensionality reduction and visualization for population-scale data — plotReducedDimPop","text":"data frame reduced dimensions (PCA UMAP) list contains data frame two ggplot2 object PCA plot UMAP plot.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/plotReducedDimPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dimensionality reduction and visualization for population-scale data — plotReducedDimPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a cell-type-specific power analysis on eQTL effects — powerAnalysis","title":"Perform a cell-type-specific power analysis on eQTL effects — powerAnalysis","text":"Perform cell-type-specific power analysis eQTL effects","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a cell-type-specific power analysis on eQTL effects — powerAnalysis","text":"","code":"powerAnalysis(   marginal_list,   marginal_model = NULL,   refit_formula = NULL,   geneid = NULL,   snpid = NULL,   cellstate_colname = \"cell_type\",   cellstate_vector = NULL,   indiv_colname = \"indiv\",   method = c(\"nb\", \"poisson\", \"gaussian\", \"pseudoBulkLinear\"),   nindivs = NULL,   ncells = NULL,   nPool = NULL,   nIndivPerPool = NULL,   nCellPerPool = NULL,   alpha = 0.05,   nsims = 100,   ncores = 1 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a cell-type-specific power analysis on eQTL effects — powerAnalysis","text":"marginal_list output function fitMarginalPop(). marginal_model character showing model types full marginal model. refit_formula formula used refit marginal full model user wants . Default null. geneid character object contains geneid. snpid character object contains snpid. cellstate_colname string scalar specifying cell state variable marginal_list[[geneid]]$frame. default \"cell_type\". cellstate_vector vector object specifies cell type tested indiv_colname string scalar sample ID variable cell covariate marginal_list[[geneid]]$frame. default \"indiv\". method character object specifying method analyzed power. (Options: nb,poisson,gaussian,pseudoBulkLinear). nindivs vector numeric values showing numbers individuals user wants simulate. ncells vector numeric values showing numbers cells per individual user wants simulate. nPool vector numeric values showing many pools sequencing performed. nIndivPerPool numerical value showing many individuals sequenced one pool. nCellPerPool vector numeric values showing many cells sequenced one pool. alpha p value threshold rejecting H0 hypothesis. nsims number simulations calculating power. parameter affect resolution power value. ncores number CPU cores user wants use.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a cell-type-specific power analysis on eQTL effects — powerAnalysis","text":"list named features, containing list following items: intercept intercept genotype effect specified type/level. slope slope genotype effect specified type/level. power data frame contains power values different parameter settings. data data frame contains H1 H0 genotype effect estimates different parameter settings simulation times.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a cell-type-specific power analysis on eQTL effects — powerAnalysis","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a bootstrap confidence interval for each power — powerCICalculation","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"Calculate bootstrap confidence interval power","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"","code":"powerCICalculation(   res,   cellstate_vector,   nindivs,   ncells,   snp_number = 10,   gene_number = 800,   alpha = 0.05,   nsim = 1000,   conf = 0.05 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"res output function powerAnalysis() cellstate_vector vector object specifies cell type tested nindivs vector numeric values showing numbers individuals user wants simulate. ncells vector numeric values showing numbers cells per individual user wants simulate. snp_number number SNPs multiple testing correction. gene_number number genes multiple testing correction. alpha p value threshold rejecting H0 hypothesis. nsim number simulations calculating Bootstrap CI. conf Bootstrap CI interval.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"data frame contains average power standard deviations parameter settings.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"The wrapper function for power analysis — runPowerAnalysis","title":"The wrapper function for power analysis — runPowerAnalysis","text":"wrapper function power analysis","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The wrapper function for power analysis — runPowerAnalysis","text":"","code":"runPowerAnalysis(   marginal_list,   marginal_model = \"nb\",   refit_formula = NULL,   geneid = NULL,   snpid = NULL,   cellstate_colname = \"cell_type\",   cellstate_vector = NULL,   indiv_colname = \"indiv\",   methods = NULL,   nindivs = NULL,   ncells = NULL,   nPool = NULL,   nIndivPerPool = NULL,   nCellPerPool = NULL,   alpha = 0.05,   power_nsim = 100,   snp_number = 10,   gene_number = 800,   CI_nsim = 1000,   CI_conf = 0.05,   ncores = 1 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The wrapper function for power analysis — runPowerAnalysis","text":"marginal_list output function fitMarginalPop(). marginal_model character showing model types full marginal model. refit_formula formula used refit marginal full model user wants . Default null. geneid character object contains geneid. snpid character object contains snpid. cellstate_colname string scalar specifying cell state variable marginal_list[[geneid]]$frame. default \"cell_type\". cellstate_vector vector object specifies cell type tested indiv_colname string scalar sample ID variable cell covariate marginal_list[[geneid]]$frame. default \"indiv\". methods vector character objects specifying methods analyzed power. (Options: nb,poisson,gaussian,pseudoBulkLinear). nindivs vector numeric values showing numbers individuals user wants simulate. ncells vector numeric values showing numbers cells per individual user wants simulate. nPool vector numeric values showing many pools sequencing performed. nIndivPerPool numerical value showing many individuals sequenced one pool. nCellPerPool vector numeric values showing many cells sequenced one pool. alpha p value threshold rejecting H0 hypothesis. power_nsim number simulations calculating power. parameter affect resolution power value. snp_number number SNPs multiple testing correction. gene_number number genes multiple testing correction. CI_nsim number simulations calculating Bootstrap CI. CI_conf Bootstrap CI interval. ncores number CPU cores user wants use.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The wrapper function for power analysis — runPowerAnalysis","text":"data frame contains power analysis result different parameter settings.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The wrapper function for power analysis — runPowerAnalysis","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/scDesignPop-package.html","id":null,"dir":"Reference","previous_headings":"","what":"scDesignPop: Simulator for population-scale single-cell expression RNA-sequencing data — scDesignPop-package","title":"scDesignPop: Simulator for population-scale single-cell expression RNA-sequencing data — scDesignPop-package","text":"Simulate realistic population-scale single-cell RNA-sequencing (scRNA-seq) data single-cell expression quantitative trait loci analysis (sc-eQTL) using input eQTL data scRNA-seq data. use flexible, statistical modeling framework learns interpretable parameters real data.","code":""},{"path":[]},{"path":"https://github.com/chrisycd/scDesignPop/reference/scDesignPop-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"scDesignPop: Simulator for population-scale single-cell expression RNA-sequencing data — scDesignPop-package","text":"Maintainer: Chris Y. Dong chris.dong@ucla.edu (ORCID) Authors: Yihui Cen yihuicen@g.ucla.edu (ORCID)","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"Function fits multinomial regression model using input genotype principal components (PCs) population-level covariates training data outputs simulated cell proportions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"","code":"simuCellProportion(   sce,   genoPC,   new_genoPC,   new_othercov,   PCnum = 5L,   cov_colnames = NULL,   indiv_colname = \"indiv\",   cellstate_colname = \"cell_type\",   cn_model_family = \"lognormal\",   cn_meanlog = NULL,   cn_sdlog = NULL,   cp_model_family = \"MN\",   cp_intercept = TRUE,   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"sce SingleCellExperiment object. genoPC data frame individual genotype principal components sce input. first column must variable individual name indiv_colname. new_genoPC data frame individual genotype principal components simulated individuals. first column must variable individual name indiv_colname, followed \"PC1\", \"PC2\", etc. new_othercov data frame test data containing additional covariates colData sce. PCnum integer scalar specifying number principal components used multinomial regression. cov_colnames optional string vector scalar variable names include cell proportion model. Variables must exist new_othercov colData sce. indiv_colname string scalar specify variable sce containing individuals. cellstate_colname string scalar specify variable sce containing cell states (ie. cell types). cn_model_family string scalar specify model family used total cell modeling. Currently 'lognormal' fitdistr supported. cn_meanlog numeric scalar mean parameter (log scale) total cell number model. cn_meanlog = NULL, parameter estimated input data. cn_sdlog numeric scalar standard deviation parameter (log scale) total cell number model. n_sdlog = NULL, parameter estimated input data. cp_model_family string scalar specify model family used cell proportion modeling. Currently 'MN' dist supported. cp_intercept logical scalar whether include intercept cell proportion model. ... additional optional arguments.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"outputs list following elements: simu_cov cell--covariate data frame simulated cell types corresponding individual. cp_simu_df cell type--covariate data frame summarizing simulate cell proportions, total cell numbers, cells per cell types. cp_modelfit fitted model object cell proportion model. cn_modelfit fitted model object cell number model.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate new data — simuNewPop","title":"Simulate new data — simuNewPop","text":"simuNewPop generates new simulated data based fitted marginal copula models. function adapted simu_new function scDesign3 v0.99.7","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate new data — simuNewPop","text":"","code":"simuNewPop(   sce,   assay_use = \"counts\",   mean_mat,   sigma_mat,   zero_mat,   quantile_mat = NULL,   copula_list,   n_cores,   fastmvn = FALSE,   family_use,   nonnegative = TRUE,   nonzerovar = FALSE,   input_data,   new_covariate,   important_feature = \"all\",   parallelization = \"mcmapply\",   BPPARAM = NULL,   filtered_gene,   mean_limit = 1e+15,   debug = FALSE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate new data — simuNewPop","text":"sce SingleCellExperiment object. assay_use string indicates assay use sce. Default 'counts'. mean_mat cell feature matrix mean parameter. sigma_mat cell feature matrix sigma parameter. zero_mat cell feature matrix zero-inflation parameter. quantile_mat cell feature matrix multivariate quantile. copula_list list copulas generating multivariate quantile matrix. provided, quantile_mat must NULL. n_cores integer. number cores use. fastmvn logical variable. TRUE, sampling multivariate Gaussian done mvnfast, otherwise mvtnorm. Default FALSE. family_use string marginal distribution. Must one 'poisson', 'nb', 'gaussian'. nonnegative logical variable. TRUE, values < 0 synthetic data converted 0. Default TRUE (since expression matrix nonnegative). nonzerovar logical variable. TRUE, gene zero variance, cell replaced 1. designed avoiding potential errors, example, PCA. input_data input count matrix. new_covariate data.frame contains covariates targeted simulated data  constructDataPop. important_feature important_feature string vector indicates whether gene used correlation estimation . string, string must either \"\" (using genes) \"auto\", indicates genes automatically selected based proportion zero expression across cells gene. Gene zero proportion greater 0.8 excluded form gene-gene correlation estimation. vector, logical vector length equal number genes sce. TRUE logical vector means corresponding gene included gene-gene correlation estimation FALSE logical vector means corresponding gene excluded gene-gene correlation estimation. default value \"\". parallelization string indicating specific parallelization function use. Must one 'mcmapply', 'bpmapply', 'pbmcmapply', corresponds parallelization function package parallel,BiocParallel, pbmcapply respectively. default value 'mcmapply'. BPPARAM MulticoreParam object NULL. parameter parallelization = 'mcmapply' 'pbmcmapply', parameter must NULL. parameter parallelization = 'bpmapply',  parameter must one MulticoreParam object offered package 'BiocParallel. default value NULL. filtered_gene vector NULL contains genes excluded marginal copula fitting mean_limit numeric scalar filter genes cells exceed limit mean_mat. default value 1e15. avoid features extremely high unreasonable means. debug logical scalar whether return list variables addition simulated count matrix. default FALSE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate new data — simuNewPop","text":"feature cell matrix new simulated count (expression) matrix sparse matrix.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate new data — simuNewPop","text":"function takes new covariate (use) constructDataPop, parameter matrices extractParaPop multivariate Unifs fitCopulaPop.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate new data — simuNewPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate new design matrix for power analysis — simulatePADesignMatrix","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"Simulate new design matrix power analysis","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"","code":"simulatePADesignMatrix(   fit,   df_sel,   nindiv_total,   model = c(\"nb\", \"poisson\", \"gaussian\"),   snpid,   nindiv,   ncell,   cellstate_colname,   indiv_colname )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"fit fitted stats::model object. df_sel data frame contains new design matrix. nindiv_total vector contains number individuals genotype. model character showing model types full marginal model. snpid character object contains snpid. nindiv numeric value showing number individuals user wants simulate. ncell numeric value showing number cells per individual user wants simulate. cellstate_colname string scalar specifying cell state variable df_sel. default \"cell_type\". indiv_colname string scalar sample ID variable cell covariate marginal_list[[geneid]]$frame. default \"indiv\".","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"new data frame contains design matrix simulated response.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the power analysis result — visualizePowerResult","title":"Visualize the power analysis result — visualizePowerResult","text":"Visualize power analysis result","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the power analysis result — visualizePowerResult","text":"","code":"visualizePowerResult(   power_result,   cellstate_vector,   x_axis = \"nindiv\",   y_axis = \"ncell\",   col_group = \"method\",   geneid,   snpid )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the power analysis result — visualizePowerResult","text":"power_result data frame contains power analysis result different parameter settings. cellstate_vector vector cell types selected visualization. x_axis character specifies x axis. Default number individuals. y_axis character specifies y axis. Default number cells per individual. col_group character specifies color groups. Default eQTL model. geneid character object contains geneid part plot title. snpid character object contains snpid part plot title.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the power analysis result — visualizePowerResult","text":"ggplot object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the power analysis result — visualizePowerResult","text":"","code":"NULL #> NULL"}]
