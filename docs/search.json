[{"path":"https://github.com/chrisycd/scDesignPop/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 scDesignPop authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"scDesignPop Quickstart","text":"scDesignPop simulator population-scale single-cell RNA-sequencing (scRNA-seq) data. information, please check Articles website: (https://chrisycd.github.io/scDesignPop/docs/index.html).","code":""},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-1-construct-a-data-list","dir":"Articles","previous_headings":"","what":"Step 1: construct a data list","title":"scDesignPop Quickstart","text":"run scDesignPop, list data required input. done using constructDataPop function. SingleCellExperiment object eqtlgeno dataframe two main inputs needed. eqtlgeno dataframe consists eQTL annotations (must cell state, gene, SNP, chromosome, position columns minimum), genotypes across individuals (columns) every SNP (rows). structure example eqtlgeno dataframe given .","code":"data(\"example_eqtlgeno\") data(\"example_sce\") head(example_eqtlgeno) #>   cell_type         gene_id      snp_id CHR       POS indiv1 indiv2 indiv3 #> 1     cd4nc ENSG00000023902 1:150133323   1 150133323      0      1      0 #> 2     cd8nc ENSG00000023902 1:150159616   1 150159616      2      2      2 #> 3     cd4nc ENSG00000028137  1:12192270   1  12192270      2      0      2 #> 4     cd8nc ENSG00000028137  1:12267999   1  12267999      1      0      1 #> 5        nk ENSG00000028137  1:12267999   1  12267999      2      0      2 #> 6     cd4et ENSG00000049247   1:8175947   1   8175947      1      1      1 #>   indiv4 indiv5 indiv6 indiv7 indiv8 indiv9 indiv10 indiv11 indiv12 indiv13 #> 1      1      1      0      0      1      0       0       1       0       1 #> 2      1      2      1      1      2      2       2       1       2       2 #> 3      2      2      1      2      2      2       2       2       2       2 #> 4      1      1      1      0      0      1       1       1       1       1 #> 5      1      1      1      1      0      1       1       0       2       0 #> 6      0      1      0      1      1      2       1       1       0       2 #>   indiv14 indiv15 indiv16 indiv17 indiv18 indiv19 indiv20 #> 1       0       0       1       0       0       0       1 #> 2       1       1       2       2       1       2       2 #> 3       1       2       1       2       2       1       1 #> 4       0       1       1       2       0       1       2 #> 5       1       0       0       2       0       1       0 #> 6       1       1       0       1       2       0       2 data_list <- constructDataPop(     sce = example_sce,     eqtlgeno_df = example_eqtlgeno,     new_covariate = as.data.frame(colData(example_sce)),     overlap_features = NULL,     sampid_vec = NULL,     ct_copula = TRUE,     slot_name = \"counts\",     snp_model = \"single\",     cellstate_colname = \"cell_type\",     feature_colname = \"gene_id\",     snp_colname = \"snp_id\",     loc_colname = \"POS\",     chrom_colname = \"CHR\",     indiv_colname = \"indiv\",     prune_thres = 0.9     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-2-fit-marginal-model","dir":"Articles","previous_headings":"","what":"Step 2: fit marginal model","title":"scDesignPop Quickstart","text":"Next, marginal model specified fit gene using fitMarginalPop function. use Negative Binominal parametric model using \"nb\".","code":"marginal_list <- fitMarginalPop(     data_list = data_list,     mean_formula = \"(1|indiv) + cell_type\",     model_family = \"nb\",     interact_colnames = \"cell_type\",     parallelization = \"pbmcapply\",     n_threads = 50L,     loc_colname = \"POS\",     snp_colname = \"snp_id\",     cellstate_colname = \"cell_type\",     indiv_colname = \"indiv\",     filter_snps = TRUE,     snpvar_thres = 0,     force_formula = FALSE,     data_maxsize = 1     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-3-fit-a-gaussian-copula","dir":"Articles","previous_headings":"","what":"Step 3: fit a Gaussian copula","title":"scDesignPop Quickstart","text":"third step fit Gaussian copula using fitCopulaPop function.","code":"set.seed(123, kind = \"L'Ecuyer-CMRG\")  copula_fit <- fitCopulaPop(     sce = example_sce,     assay_use = \"counts\",     input_data = data_list[[\"new_covariate\"]],     marginal_list = marginal_list,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 6L,     parallelization = \"mcmapply\"     )  RNGkind(\"Mersenne-Twister\")  # reset"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-4-extract-parameters","dir":"Articles","previous_headings":"","what":"Step 4: extract parameters","title":"scDesignPop Quickstart","text":"fourth step compute mean, sigma, zero probability parameters using extractParaPop function.","code":"para_new <- extractParaPop(     sce = example_sce,     assay_use = \"counts\",     marginal_list = marginal_list,     n_cores = 6L,     family_use = \"nb\",     new_covariate = data_list[[\"new_covariate\"]],     new_eqtl_geno_list = data_list[[\"eqtl_geno_list\"]],     data = data_list[[\"covariate\"]],     parallelization = \"pbmcmapply\"     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-5-simulate-counts","dir":"Articles","previous_headings":"","what":"Step 5: simulate counts","title":"scDesignPop Quickstart","text":"fifth step simulate counts using simuNewPop function.","code":"set.seed(123)  newcount_mat <- simuNewPop(     sce = example_sce,     mean_mat = para_new[[\"mean_mat\"]],     sigma_mat = para_new[[\"sigma_mat\"]],     zero_mat = para_new[[\"zero_mat\"]],     quantile_mat = NULL,     copula_list = copula_fit[[\"copula_list\"]],     n_cores = 6L,     family_use = \"nb\",     nonnegative = TRUE,     input_data = data_list[[\"covariate\"]],     new_covariate = data_list[[\"new_covariate\"]],     important_feature = copula_fit[[\"important_feature\"]],     filtered_gene = data_list[[\"filtered_gene\"]],     parallelization = \"pbmcmapply\"     )"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-6-create-singlecellexperiment-object-using-simulated-data","dir":"Articles","previous_headings":"","what":"Step 6: create SingleCellExperiment object using simulated data","title":"scDesignPop Quickstart","text":"simulating data, can create SingleCellExperiment object follows.","code":"simu_sce <- SingleCellExperiment(list(counts = newcount_mat),                                   colData = data_list[[\"new_covariate\"]]) names(assays(simu_sce)) <- \"counts\"  # save gene meta data rowData(simu_sce) <- rowData(example_sce)"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"step-7-visualize-using-umap","dir":"Articles","previous_headings":"","what":"Step 7: visualize using UMAP","title":"scDesignPop Quickstart","text":"simulated data can visualized using UMAP plot follows.","code":"logcounts(simu_sce) <- log1p(counts(simu_sce))  simu_sce <- runPCA(simu_sce,                    ncomponents = 30)  # default is 50  set.seed(123) simu_sce <- runUMAP(   simu_sce,   dimred = \"PCA\",   n_neighbors = 15,   # default   min_dist = 0.3,     # default   n_threads = 10L   )  plotReducedDim(simu_sce, \"UMAP\", color_by = \"cell_type\")"},{"path":"https://github.com/chrisycd/scDesignPop/articles/scDesignPop.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"scDesignPop Quickstart","text":"","code":"sessionInfo()"},{"path":"https://github.com/chrisycd/scDesignPop/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chris Y. Dong. Author, maintainer. Yihui Cen. Author.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Y. Dong C, Cen Y (2025). scDesignPop: Simulator population-scale single-cell expression RNA-sequencing data. R package version 0.0.0.9004, https://github.com/chrisycd/scDesignPop.","code":"@Manual{,   title = {scDesignPop: Simulator for population-scale single-cell expression RNA-sequencing data},   author = {Chris {Y. Dong} and Yihui Cen},   year = {2025},   note = {R package version 0.0.0.9004},   url = {https://github.com/chrisycd/scDesignPop}, }"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"scdesignpop","dir":"","previous_headings":"","what":"Simulator for population-scale single-cell expression RNA-sequencing data","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"scDesignPop simulator population-scale single-cell RNA-sequencing (scRNA-seq) data.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"can install development version scDesignPop GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"chrisycd/scDesignPop\")"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"running-scdesignpop","dir":"","previous_headings":"","what":"Running scDesignPop","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"example showing run scDesignPop several sequential steps.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"step-1-construct-a-data-list","dir":"","previous_headings":"","what":"Step 1: construct a data list","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"run scDesignPop, list data required input. done using constructDataPop function. SingleCellExperiment object eqtlgeno dataframe two main inputs needed. eqtlgeno dataframe consists eQTL annotations (must cell state, gene, SNP, chromosome, position columns minimum), genotypes across individuals (columns) every SNP (rows). structure example eqtlgeno dataframe given .","code":"library(scDesignPop) library(SingleCellExperiment) library(SummarizedExperiment) library(scater)  data(\"example_eqtlgeno\") data(\"example_sce\")  head(example_eqtlgeno) #>   cell_type         gene_id      snp_id CHR       POS indiv1 indiv2 indiv3 #> 1     cd4nc ENSG00000023902 1:150133323   1 150133323      0      1      0 #> 2     cd8nc ENSG00000023902 1:150159616   1 150159616      2      2      2 #> 3     cd4nc ENSG00000028137  1:12192270   1  12192270      2      0      2 #> 4     cd8nc ENSG00000028137  1:12267999   1  12267999      1      0      1 #> 5        nk ENSG00000028137  1:12267999   1  12267999      2      0      2 #> 6     cd4et ENSG00000049247   1:8175947   1   8175947      1      1      1 #>   indiv4 indiv5 indiv6 indiv7 indiv8 indiv9 indiv10 indiv11 indiv12 indiv13 #> 1      1      1      0      0      1      0       0       1       0       1 #> 2      1      2      1      1      2      2       2       1       2       2 #> 3      2      2      1      2      2      2       2       2       2       2 #> 4      1      1      1      0      0      1       1       1       1       1 #> 5      1      1      1      1      0      1       1       0       2       0 #> 6      0      1      0      1      1      2       1       1       0       2 #>   indiv14 indiv15 indiv16 indiv17 indiv18 indiv19 indiv20 #> 1       0       0       1       0       0       0       1 #> 2       1       1       2       2       1       2       2 #> 3       1       2       1       2       2       1       1 #> 4       0       1       1       2       0       1       2 #> 5       1       0       0       2       0       1       0 #> 6       1       1       0       1       2       0       2 data_list <- constructDataPop(     sce = example_sce,     eqtlgeno_df = example_eqtlgeno,     new_covariate = as.data.frame(colData(example_sce)),     overlap_features = NULL,     sampid_vec = NULL,     ct_copula = TRUE,     slot_name = \"counts\",     snp_model = \"single\",     cellstate_colname = \"cell_type\",     feature_colname = \"gene_id\",     snp_colname = \"snp_id\",     loc_colname = \"POS\",     chrom_colname = \"CHR\",     indiv_colname = \"indiv\",     prune_thres = 0.9     )"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"step-2-fit-marginal-model","dir":"","previous_headings":"","what":"Step 2: fit marginal model","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"Next, marginal model specified fit gene using fitMarginalPop function. use Negative Binominal parametric model using \"nb\".","code":"marginal_list <- fitMarginalPop(     data_list = data_list,     mean_formula = \"(1|indiv) + cell_type\",     model_family = \"nb\",     interact_colnames = \"cell_type\",     parallelization = \"pbmcapply\",     n_threads = 50L,     loc_colname = \"POS\",     snp_colname = \"snp_id\",     cellstate_colname = \"cell_type\",     indiv_colname = \"indiv\",     filter_snps = TRUE,     snpvar_thres = 0,     force_formula = FALSE,     data_maxsize = 1     )"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"step-3-fit-a-gaussian-copula","dir":"","previous_headings":"","what":"Step 3: fit a Gaussian copula","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"third step fit Gaussian copula using fitCopulaPop function.","code":"set.seed(123, kind = \"L'Ecuyer-CMRG\")  copula_fit <- fitCopulaPop(     sce = example_sce,     assay_use = \"counts\",     input_data = data_list[[\"new_covariate\"]],     marginal_list = marginal_list,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 6L,     parallelization = \"mcmapply\"     )  RNGkind(\"Mersenne-Twister\")  # reset"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"step-4-extract-parameters","dir":"","previous_headings":"","what":"Step 4: extract parameters","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"fourth step compute mean, sigma, zero probability parameters using extractParaPop function.","code":"para_new <- extractParaPop(     sce = example_sce,     assay_use = \"counts\",     marginal_list = marginal_list,     n_cores = 6L,     family_use = \"nb\",     new_covariate = data_list[[\"new_covariate\"]],     new_eqtl_geno_list = data_list[[\"eqtl_geno_list\"]],     data = data_list[[\"covariate\"]],     parallelization = \"pbmcmapply\"     )"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"step-5-simulate-counts","dir":"","previous_headings":"","what":"Step 5: simulate counts","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"fifth step simulate counts using simuNewPop function.","code":"set.seed(123)  newcount_mat <- simuNewPop(     sce = example_sce,     mean_mat = para_new[[\"mean_mat\"]],     sigma_mat = para_new[[\"sigma_mat\"]],     zero_mat = para_new[[\"zero_mat\"]],     quantile_mat = NULL,     copula_list = copula_fit[[\"copula_list\"]],     n_cores = 6L,     family_use = \"nb\",     nonnegative = TRUE,     input_data = data_list[[\"covariate\"]],     new_covariate = data_list[[\"new_covariate\"]],     important_feature = copula_fit[[\"important_feature\"]],     filtered_gene = data_list[[\"filtered_gene\"]],     parallelization = \"pbmcmapply\"     )"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"step-6-create-singlecellexperiment-object-using-simulated-data","dir":"","previous_headings":"","what":"Step 6: create SingleCellExperiment object using simulated data","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"simulating data, can create SingleCellExperiment object follows.","code":"simu_sce <- SingleCellExperiment(list(counts = newcount_mat),                                   colData = data_list[[\"new_covariate\"]]) names(assays(simu_sce)) <- \"counts\"  # save gene meta data rowData(simu_sce) <- rowData(example_sce)"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"step-7-visualize-using-umap","dir":"","previous_headings":"","what":"Step 7: visualize using UMAP","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"simulated data can visualized using UMAP plot follows.","code":"logcounts(simu_sce) <- log1p(counts(simu_sce))  simu_sce <- runPCA(simu_sce,                    ncomponents = 30)  # default is 50  set.seed(123) simu_sce <- runUMAP(   simu_sce,   dimred = \"PCA\",   n_neighbors = 15,   # default   min_dist = 0.3,     # default   n_threads = 10L   )  plotReducedDim(simu_sce, \"UMAP\", color_by = \"cell_type\")"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"step-8-running-power-analysis","dir":"","previous_headings":"","what":"Step 8: running power analysis","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"Lastly, scDesignPop can perform simulation-based power analysis specific gene-SNP pair across cell types using runPowerAnalysis function. , choose negative binomial mixed model using \"nb\" option.","code":"set.seed(123) power_data <- runPowerAnalysis(marginal_list = marginal_list,                                marginal_model = \"nb\",                                geneid = \"ENSG00000163221\",                                snpid = \"1:153337943\",                                type_specific = \"cell_type\",                                type_vector = c(\"bmem\", \"monoc\"),                                methods = c(\"nb\"),                                nindivs = c(50, 200),                                ncells = c(10, 50),                                alpha = 0.05,                                power_nsim = 100,                                snp_number = 10,                                gene_number = 800,                                CI_nsim = 1000,                                CI_conf = 0.05,                                ncores = 50L) #> [1] -4.760502 #> [1] 0.07402542 #> [1] 1.848063 #> [1] -0.1496348 head(power_data) #>        power nindiv ncell    mean         sd  ci1  ci2 intercept       slope #> 2.5%    0.06     50    10 0.03258 0.01892358 0.00 0.08 -4.760502  0.07402542 #> 2.5%1   0.11     50    50 0.05419 0.02388125 0.01 0.11 -4.760502  0.07402542 #> 2.5%2   0.08    200    10 0.02983 0.02186205 0.00 0.08 -4.760502  0.07402542 #> 2.5%3   0.15    200    50 0.09287 0.03008934 0.04 0.16 -4.760502  0.07402542 #> 2.5%4   0.46     50    10 0.22914 0.08725293 0.11 0.45  1.848063 -0.14963478 #> 2.5%11  0.49     50    50 0.11778 0.15279993 0.00 0.42  1.848063 -0.14963478 #>        celltype   method #> 2.5%       bmem NB mixed #> 2.5%1      bmem NB mixed #> 2.5%2      bmem NB mixed #> 2.5%3      bmem NB mixed #> 2.5%4     monoc NB mixed #> 2.5%11    monoc NB mixed"},{"path":"https://github.com/chrisycd/scDesignPop/index.html","id":"step-9-visualizing-power-results","dir":"","previous_headings":"","what":"Step 9: visualizing power results","title":"Simulator for population-scale single-cell expression RNA-sequencing data","text":"power analysis results can visualized using visualizePowerResult function.","code":"visualizePowerResult(power_result = power_data,                      celltypes = c(\"bmem\", \"monoc\"),                      x_axis = \"nindiv\",                      y_axis = \"ncell\",                      col_group = \"method\",                      geneid = \"ENSG00000163221\",                      snpid = \"1:153337943\")"},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gam.html","id":null,"dir":"Reference","previous_headings":"","what":"A calcParaVectors Method for gam (mgcv package) Objects — calcParaVectors.gam","title":"A calcParaVectors Method for gam (mgcv package) Objects — calcParaVectors.gam","text":"calcParaVectors Method gam (mgcv package) Objects","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A calcParaVectors Method for gam (mgcv package) Objects — calcParaVectors.gam","text":"","code":"# S3 method for class 'gam' calcParaVectors(fit, family_use, new_covariate, total_cells, ...)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A calcParaVectors Method for gam (mgcv package) Objects — calcParaVectors.gam","text":"fit add later family_use add later new_covariate add later total_cells add later ... Additional arguments passed calcParaVectors S3 method functions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gamlss.html","id":null,"dir":"Reference","previous_headings":"","what":"A calcParaVectors Method for gamlss Objects — calcParaVectors.gamlss","title":"A calcParaVectors Method for gamlss Objects — calcParaVectors.gamlss","text":"calcParaVectors Method gamlss Objects","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gamlss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A calcParaVectors Method for gamlss Objects — calcParaVectors.gamlss","text":"","code":"# S3 method for class 'gamlss' calcParaVectors(fit, family_use, new_covariate, total_cells, data, ...)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.gamlss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A calcParaVectors Method for gamlss Objects — calcParaVectors.gamlss","text":"fit add later family_use add later new_covariate add later total_cells add later data add later ... Additional arguments passed calcParaVectors S3 method functions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.glmmTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"A calcParaVectors Method for glmmTMB Objects — calcParaVectors.glmmTMB","title":"A calcParaVectors Method for glmmTMB Objects — calcParaVectors.glmmTMB","text":"calcParaVectors Method glmmTMB Objects","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.glmmTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A calcParaVectors Method for glmmTMB Objects — calcParaVectors.glmmTMB","text":"","code":"# S3 method for class 'glmmTMB' calcParaVectors(fit, family_use, new_covariate, total_cells, ...)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.glmmTMB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A calcParaVectors Method for glmmTMB Objects — calcParaVectors.glmmTMB","text":"fit add later family_use add later new_covariate add later total_cells add later ... Additional arguments passed calcParaVectors S3 method functions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to compute model parameter vectors — calcParaVectors","title":"Generic function to compute model parameter vectors — calcParaVectors","text":"S3 generic function computing model parameters without new covariate feature","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to compute model parameter vectors — calcParaVectors","text":"","code":"calcParaVectors(fit, family_use, new_covariate, total_cells, data, ...)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/calcParaVectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to compute model parameter vectors — calcParaVectors","text":"fit add later family_use add later new_covariate add later total_cells add later data add later ... Additional arguments passed calcParaVectors S3 method functions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":null,"dir":"Reference","previous_headings":"","what":"Check membership of first vector compared to other vectors — checkVectorContain","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"internal helper function check elements first vector subsets one vectors. Ordering elements ignored.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"","code":"checkVectorContain(..., ignore_dups = FALSE)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"... arguments two vectors. ignore_dups logical scalar disregard duplicate elements comparison. Default FALSE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"logical scalar","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorContain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check membership of first vector compared to other vectors — checkVectorContain","text":"","code":"vec1 <- c(\"cherry\", \"apple\", \"cherry\") vec2 <- c(\"apple\", \"cherry\", \"banana\", \"cherry\") vec3 <- c(\"banana\", \"kiwi\", \"apple\", \"cherry\") vec4 <- c(\"banana\", \"apple\", \"apple\", \"cherry\")  checkVectorContain(vec1, vec2, vec3, ignore_dups = TRUE)   # returns TRUE #> [1] TRUE checkVectorContain(vec1, vec2, vec4, ignore_dups = FALSE)  # returns FALSE #> [1] TRUE"},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if multiple vectors have same elements — checkVectorEqual","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"internal helper function check two vectors elements (order considered option).","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"","code":"checkVectorEqual(..., ignore_order = TRUE)"},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"... arguments two vectors. ignore_order logical scalar disregard ordering elements input vectors. Default TRUE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"logical scalar","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/checkVectorEqual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if multiple vectors have same elements — checkVectorEqual","text":"","code":"vec1 <- c(\"cherry\", \"apple\", \"banana\", \"cherry\") vec2 <- c(\"cherry\", \"apple\", \"cherry\", \"banana\") vec3 <- c(\"banana\", \"cherry\", \"apple\", \"cherry\")  checkVectorEqual(vec1, vec2, vec3, ignore_order = TRUE)  # returns TRUE #> [1] TRUE checkVectorEqual(vec1, vec2, vec3, ignore_order = FALSE)  # returns FALSE #> [1] FALSE"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a list of input data — constructDataPop","title":"Construct a list of input data — constructDataPop","text":"Function extracts expression matrix, cell covariates, filters SNPs eQTL genotype dataframe.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a list of input data — constructDataPop","text":"","code":"constructDataPop(   sce,   eqtlgeno_df,   new_eqtlgeno_df = NULL,   new_covariate = NULL,   overlap_features = NULL,   sampid_vec = NULL,   ct_copula = TRUE,   slot_name = \"counts\",   snp_model = c(\"single\", \"multi\"),   cellstate_colname = \"cell_type\",   feature_colname = \"gene_id\",   snp_colname = \"snp_id\",   loc_colname = \"POS\",   chrom_colname = \"CHR\",   indiv_colname = \"indiv\",   prune_thres = 0.9 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a list of input data — constructDataPop","text":"sce SingleCellExperiment object. eqtlgeno_df dataframe eQTL annotations SNP genotypes gene. new_eqtlgeno_df dataframe eQTL annotations SNP genotypes gene new individuals. default NULL. new_covariate cell covariate dataframe simulate. default NULL. overlap_features optional string vector filter features (ie. genes). default NULL. sampid_vec optional string vector filter sample ids. default NULL. ct_copula logical scalar whether fit copula cell state variable specified cellstate_colname option. default TRUE. slot_name string scalar specifying slot use input sce. default \"counts\". snp_model string scalar specifying type SNP model used. Options either \"single\" single-SNP, \"multi\" multi-SNP. cellstate_colname string scalar specifying cell state variable eqtlgeno_df cell covariate sce object. default \"cell_type\". feature_colname string scalar specifying feature variable (ie. genes) eqtlgeno_df. default \"gene_id\". snp_colname string scalar SNP variable eqtlgeno_df. default \"snp_id\". loc_colname string scalar last column eQTL annotation eqtlgeno_df. default \"POS\". chrom_colname string scalar chromosome variable eqtlgeno_df. default \"CHR\". indiv_colname string scalar sample ID variable cell covariate sce. default \"indiv\". prune_thres numerical value 0 1 used threshold pairwise correlations eQTLs' genotypes feature. default value 0.9.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a list of input data — constructDataPop","text":"outputs list following elements: count_mat cell--gene matrix response values. covariate cell--covariate data frame used fit marginal. new_covariate optional cell--covariate data frame used prediction. important_features string vector gene ids. eqtl_geno_list list eQTL genotype dataframes gene (fit marginal). new_eqtl_geno_list optional list eQTL genotype dataframes gene (new individual simulation). filtered_gene string vector features QC filtered.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDataPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a list of input data — constructDataPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Design Matrix Dataframe — constructDesignMatrix","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"helper function constructs design matrix using given feature's expression vector every cell, eQTL genotype dataframe (optional), cell covariate dataframe.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"","code":"constructDesignMatrix(   response_vec,   cellcov_df,   eqtlgeno_df,   loc_colname = \"POS\",   snp_colname = \"snp_id\",   indiv_colname = \"indiv\",   filter_snps = TRUE,   snpvar_thres = 0,   cleanup = TRUE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"response_vec vector values response variable. cellcov_df cell--covariates dataframe containing covariates (explanatory variables) cells. eqtlgeno_df SNP--sample genotype dataframe containing feature's eQTL annotations SNP genotypes (explanatory variables) samples (ie. individuals). loc_colname string scalar column name SNP position variable. snp_colname string scalar column name SNP id variable. indiv_colname string scalar column name individuals (samples). filter_snps logical scalar whether filter SNP covariates either low-variance 1 distinct genotype (ie. 1's) prior fitting model. snpvar_thres numeric scalar (0 1) used filter SNPs whose variance genotypes across samples threshold. Used together filter_snps = TRUE. cleanup logical scalar whether clean variables constructing dmat_df.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"list containing following: dmat_df dataframe design matrix containing covariates (cell covariates eQTL genotype covariates) given feature. snp_cov string scalar vector SNP ids design matrix.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"response_vec provided, function constructs full design matrix dataframe (ie. response variable), whereas covariate dataframe constructed response_vec = NULL.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructDesignMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a Design Matrix Dataframe — constructDesignMatrix","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"function creates combined dataframe using input eQTL annotations, sample genotype dataframe.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"","code":"constructEqtlGeno(   eqtl_annot_df,   geno_df,   sampid_vec,   name = NULL,   feature_colname = \"gene_name\",   cellstate_colname = \"cell_type\",   snp_colname = \"snp_id\",   loc_colname = \"POS\" )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"eqtl_annot_df eQTL annotation dataframe geno_df eQTL sample genotype dataframe sampid_vec sample id vector name string integer scalar identify input feature_colname feature variable name cellstate_colname cell state variable name snp_colname SNP id variable name loc_colname SNP position variable name","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"dataframe eQTL annotations genotype SNPs","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructEqtlGeno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct eQTL annotation and genotype dataframe — constructEqtlGeno","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a Model Formula — constructFormula","title":"Constructs a Model Formula — constructFormula","text":"helper function specifies formula marginal model.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a Model Formula — constructFormula","text":"","code":"constructFormula(   model_formula,   interact_colnames = NULL,   snp_cov = NULL,   force_formula = FALSE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a Model Formula — constructFormula","text":"model_formula string scalar specify model formula, including random effects () without SNP genotypes SNP genotype interaction effects. interact_colnames string scalar vector variable names first-order interaction SNP genotypes. snp_cov string scalar vector specifies SNP covariates used model. force_formula logical scalar whether bypass model parsimony check. force_formula = TRUE, interaction terms whose covariates main effects model permitted. Results error force_formula = FALSE length(geno_interact_names) > 0.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs a Model Formula — constructFormula","text":"formula object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructs a Model Formula — constructFormula","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a model formula for power analysis — constructPAFormula","title":"Construct a model formula for power analysis — constructPAFormula","text":"Construct model formula power analysis","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a model formula for power analysis — constructPAFormula","text":"","code":"constructPAFormula(   fm,   method = c(\"nb\", \"poisson\", \"gaussian\", \"pseudoBulkLinear\"),   snpid = NULL,   type_specific = NULL )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a model formula for power analysis — constructPAFormula","text":"fm stats::formula object full marginal model. method character object specifying method analyzed power. (Options: nb,poisson,gaussian,pseudoBulkLinear). snpid character object contains snpid. type_specific character object contains name covariate analysis specific .","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a model formula for power analysis — constructPAFormula","text":"stats::formula object power analysis specified type.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructPAFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a model formula for power analysis — constructPAFormula","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"Construct SingleCellExperiment object specified covariates.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"","code":"constructSCE(   data_obj,   cellcov_df = NULL,   featcov_df = NULL,   cellcov_names,   sampid_vec = NULL,   overlap_features = NULL,   assay_name = \"RNA\",   slot_name = \"counts\",   sce_name = slot_name,   indiv_colname = \"indiv\",   cellstate_colname = \"cell_type\",   factor_colnames = NULL,   cellcov_renames = cellcov_names )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"data_obj Seurat, SingleCellExperiment, expression matrix (gene--cell) used construct new SingleCellExperiment object. cellcov_df dataframe containing covariates cells. Row names must cell names match data_obj. used data_obj matrix object. featcov_df dataframe containing covariates features (ie genes). Row names must feature names match data_obj. used data_obj matrix object. cellcov_names string vector columns extract cell covariates. sampid_vec optional string vector sample ids (individuals). Default NULL. provided, must match sample ids found data_obj. overlap_features optional string vector features filter data_obj. Default NULL. provided, features must present data_obj. assay_name string scalar name Seurat object slot interest. used data_obj Seurat object. slot_name string scalar type assay data (either 'logcounts' 'counts'). Default 'counts'. used data_obj Seurat SingleCellExperiment object. sce_name string scalar type assay data output SingleCellExperiment. indiv_colname string scalar sample id colname. Must present cellcov_df data_obj. Default 'indiv'. cellstate_colname string scalar cell state colname. Must present cellcov_df data_obj. Default 'cell_type'. factor_colnames optional string vector scalar columns coerce factor variables. Default NULL. provided, must present cellcov_df data_obj. cellcov_renames optional string vector rename cell covariates. Must length cellcov_names. Default cellcov_names.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"SingleCellExperiment object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/constructSCE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a SingleCellExperiment object with specified covariates. — constructSCE","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_eqtlgeno.html","id":null,"dir":"Reference","previous_headings":"","what":"A dataframe containing both eQTL annotations and genotypes of individuals — example_eqtlgeno","title":"A dataframe containing both eQTL annotations and genotypes of individuals — example_eqtlgeno","text":"subset data OneK1K dataset whose individual ids anonymized, simulated genotypes.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_eqtlgeno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dataframe containing both eQTL annotations and genotypes of individuals — example_eqtlgeno","text":"","code":"data(\"example_eqtlgeno\")"},{"path":[]},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_eqtlgeno.html","id":"example-eqtlgeno","dir":"Reference","previous_headings":"","what":"example_eqtlgeno","title":"A dataframe containing both eQTL annotations and genotypes of individuals — example_eqtlgeno","text":"data frame 270 cell-type specific eQTLs (rows), 5 eQTL relevant annotations (cols) consisting cell_type, gene_id, snp_id, CHR, POS, 20 samples' genotypes (cols). cell_type Abbreviated cell type gene_id Gene ID snp_id SNP id cell-type specific eQTL CHR Chromosome POS Chromosome location SNP","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A SingleCellExperiment object containing both cell type and individual id — example_sce","title":"A SingleCellExperiment object containing both cell type and individual id — example_sce","text":"subset scRNA-seq data OneK1K cohort anonymized.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A SingleCellExperiment object containing both cell type and individual id — example_sce","text":"","code":"data(\"example_sce\")"},{"path":[]},{"path":"https://github.com/chrisycd/scDesignPop/reference/example_sce.html","id":"example-sce","dir":"Reference","previous_headings":"","what":"example_sce","title":"A SingleCellExperiment object containing both cell type and individual id — example_sce","text":"data frame 100 genes (rows) 17,918 cells (cols) 20 individuals : cell_type Cell type indiv Individual id","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data from SingleCellExperiment object — extractFromSCE","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"Extract data SingleCellExperiment object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"","code":"extractFromSCE(   sce_obj,   features = NULL,   slot_name = \"counts\",   indiv_colname = \"indiv\",   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"sce_obj SingleCellExperiment object features string vector filter features slot_name string scalar specify type input assay data indiv_colname string scalar specify column indiv ids ... options specify extracted outputs","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"list extracted data","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSCE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract data from SingleCellExperiment object — extractFromSCE","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data from Seurat object — extractFromSeurat","title":"Extract data from Seurat object — extractFromSeurat","text":"Extract data Seurat object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data from Seurat object — extractFromSeurat","text":"","code":"extractFromSeurat(   seurat_obj,   features = NULL,   assay_name = \"RNA\",   slot_name = \"counts\",   indiv_colname = \"indiv\",   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data from Seurat object — extractFromSeurat","text":"seurat_obj Seurat object features string vector filter features assay_name string scalar specify name input assay data slot_name string scalar specify type input assay data indiv_colname string scalar specify column indiv ids ... options specify extracted outputs. Currently available: col_class : logical value feat_names : logical value cell_names : logical value sc_indiv : logical value expr_mat : logical value sc_cov : logical value feat_cov : logical value","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data from Seurat object — extractFromSeurat","text":"list extracted data following optional outputs: col_class : vector column classes cell covariate variables feat_names : vector feature names cell_names : vector cell names sc_indiv : vector distinct sample ids extracted cell covariate using indiv_colname expr_mat : expression matrix extracted using assay_name slot_name options sc_cov : dataframe cell covariates feat_cov : dataframe feature covariates","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractFromSeurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract data from Seurat object — extractFromSeurat","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract parameter matrix for new covariate df — extractParaPop","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"main function.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"","code":"extractParaPop(   sce,   assay_use = \"counts\",   marginal_list,   n_cores,   family_use,   new_covariate,   new_eqtl_geno_list,   indiv_colname = \"indiv\",   snp_colname = \"snp_id\",   loc_colname = \"POS\",   parallelization = \"mcmapply\",   BPPARAM = NULL,   data )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"sce add later assay_use add later marginal_list add later n_cores add later family_use string scalar vector marginal distribution used. new_covariate cell--feature covariate dataframe (construct_data.R) plus corr_group. new_eqtl_geno_list list eQTL genotype dataframes gene (predicted). indiv_colname add later snp_colname add later loc_colname add later parallelization add later BPPARAM add later data cell--feature covariate dataframe (construct_data.R) plus corr_group. Used gamlss fits.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"list mean, sigma, zero parameter cell feature matrices:","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/extractParaPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract parameter matrix for new covariate df — extractParaPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits copula for input — fitCopulaPop","title":"Fits copula for input — fitCopulaPop","text":"Fits copula input","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits copula for input — fitCopulaPop","text":"","code":"fitCopulaPop(   sce,   assay_use,   input_data,   marginal_list,   family_use,   copula = \"gaussian\",   DT = TRUE,   pseudo_obs = FALSE,   epsilon = 1e-06,   family_set = c(\"gaussian\", \"indep\"),   important_feature = \"all\",   n_cores,   parallelization = \"mcmapply\",   BPPARAM = NULL )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits copula for input — fitCopulaPop","text":"sce add later assay_use add later input_data add later marginal_list add later family_use add later copula add later DT add later pseudo_obs add later epsilon add later family_set add later important_feature add later n_cores add later parallelization add later BPPARAM add later","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits copula for input — fitCopulaPop","text":"list","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitCopulaPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits copula for input — fitCopulaPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit marginal models for every feature — fitMarginalPop","title":"Fit marginal models for every feature — fitMarginalPop","text":"Fits specified parametric model using various input parameters.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit marginal models for every feature — fitMarginalPop","text":"","code":"fitMarginalPop(   data_list,   mean_formula,   model_family = \"nb\",   interact_colnames = NULL,   parallelization = \"pbmcapply\",   n_threads = 2L,   loc_colname = \"POS\",   snp_colname = \"snp_id\",   cellstate_colname = \"cell_type\",   indiv_colname = \"indiv\",   filter_snps = TRUE,   snpvar_thres = 0,   force_formula = FALSE,   data_maxsize = 1,   keep_cellnames = FALSE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit marginal models for every feature — fitMarginalPop","text":"data_list list input data. mean_formula string scalar specify mean formula, including random effects () without SNP genotypes SNP genotype interaction effects. model_family string scalar specify model fitting used. interact_colnames string scalar vector variable names first-order interaction SNP genotypes. parallelization string scalar specifying type parallelization used marginal fitting. n_threads positive integer value (greater equal 1) specify number CPU threads used parallelization. loc_colname string scalar column name SNP position variable. snp_colname string scalar column name SNP id variable. cellstate_colname string scalar column name cell state (ie. cell type). indiv_colname string scalar column name individuals (samples). filter_snps logical scalar whether filter SNP covariates either low-variance 1 distinct genotype (ie. 1's) prior fitting model. snpvar_thres numeric scalar (0 1) used filter SNPs whose variance genotypes across samples threshold. Used together filter_snps = TRUE. force_formula logical scalar whether bypass model parsimony check. force_formula = TRUE, interaction terms whose covariates main effects model permitted. Results error force_formula = FALSE length(geno_interact_names) > 0. data_maxsize positive numeric value used set max data_list size GiB unit. Used parallelization = 'future'. keep_cellnames logical scalar whether keep cell barcode names. keep_cellnames = TRUE, memory larger. default FALSE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit marginal models for every feature — fitMarginalPop","text":"list named features, containing list following items: fit glmmTMB fit object. time numeric scalar elapsed time fit given feature. snp_cov string scalar vector SNP ids used fit given feature. model_attr list attributes extracted model. currently implemented. removed_cell string scalar vector cell names removed due low-variance (currently implemented).","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitMarginalPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit marginal models for every feature — fitMarginalPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Marginal Model — fitModel","title":"Fit a Marginal Model — fitModel","text":"Fits specified parametric model feature using response variable, eQTL genotype cell covariates explanatory variables.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Marginal Model — fitModel","text":"","code":"fitModel(   feature_name,   response_vec,   cellcov_df,   eqtlgeno_df,   mu_formula,   model_family = \"nb\",   interact_colnames = NULL,   loc_colname = \"POS\",   snp_colname = \"snp_id\",   cellstate_colname = \"cell_type\",   indiv_colname = \"indiv\",   filter_snps = TRUE,   snpvar_thres = 0,   force_formula = FALSE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Marginal Model — fitModel","text":"feature_name string scalar feature's name (ie. gene id). response_vec vector values response variable. cellcov_df cell--covariates dataframe containing covariates (explanatory variables) cells. eqtlgeno_df SNP--sample genotype dataframe containing feature's eQTL annotations SNP genotypes (explanatory variables) samples (ie. individuals). mu_formula string scalar specify mean formula, including random effects () without SNP genotypes SNP genotype interaction effects. model_family string scalar specify model fitting used. interact_colnames string scalar vector variable names first-order interaction SNP genotypes. loc_colname string scalar column name SNP position variable. snp_colname string scalar column name SNP id variable. cellstate_colname string scalar column name cell state (ie. cell type). indiv_colname string scalar column name individuals (samples). filter_snps logical scalar whether filter SNP covariates either low-variance 1 distinct genotype (ie. 1's) prior fitting model. snpvar_thres numeric scalar (0 1) used filter SNPs whose variance genotypes across samples threshold. Used together filter_snps = TRUE. force_formula logical scalar whether bypass model parsimony check. force_formula = TRUE, interaction terms whose covariates main effects model permitted. Results error force_formula = FALSE length(geno_interact_names) > 0.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Marginal Model — fitModel","text":"list containing fitted model object, elapsed time, SNP ids covariates, removed cells (currently implemented.)","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Marginal Model — fitModel","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a marginal model for power analysis — fitPAModel","title":"Fit a marginal model for power analysis — fitPAModel","text":"Fit marginal model power analysis","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a marginal model for power analysis — fitPAModel","text":"","code":"fitPAModel(   df,   model_formula,   idx,   method = c(\"nb\", \"poisson\", \"gaussian\", \"pseudoBulkLinear\"),   snpid )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a marginal model for power analysis — fitPAModel","text":"df data frame object contains design matrix. model_formula stats::formula object contains model formula power analysis. idx numeric value recording serial number simulation method character object specifying method analyzed power. (Options: nb,poisson,gaussian,pseudoBulkLinear). snpid character object contains snpid.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a marginal model for power analysis — fitPAModel","text":"fitted stats::model object.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/fitPAModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a marginal model for power analysis — fitPAModel","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify marginal models — modifyMarginalModels","title":"Modify marginal models — modifyMarginalModels","text":"Modify marginal model parameters genes based user inputs cell-type-specific eQTLs.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify marginal models — modifyMarginalModels","text":"","code":"modifyMarginalModels(   marginal_list,   eqtlgeno_list,   features,   celltype,   neg_ctrl = FALSE,   mean_log2fc = 0,   eqtl_log2fc = mean_log2fc,   eqtl_reverse = FALSE,   mean_baseline = NULL,   eqtl_baseline = NULL,   mean_baseline_only = FALSE,   eqtl_baseline_only = FALSE,   disp_scaling = \"linear\",   cellstate_colname = \"cell_type\",   snp_colname = \"snp_id\",   verbose = TRUE,   debug = FALSE,   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify marginal models — modifyMarginalModels","text":"marginal_list list marginal model objects. eqtlgeno_list list eqtl genotypes. features scalar vector features (ie. genes) apply modifications. celltype string specify cell type make modification. neg_ctrl logical value whether set negative control eQTL (ie. non-eGene).  option sets conditional means identical across genotypes (0, 1, 2).  neg_ctrl = TRUE, mean_log2fc option still applied set, eqtl_log2fc overidden impact.  Default FALSE. mean_log2fc numeric scalar vector log2 fold-change parameter increase decrease conditional mean genotype 1 \\(\\mu_{1}\\) cell type. Default mean_log2fc = 0 (parameters modified uses estimated parameters fitted marginal model). eqtl_log2fc numeric scalar vector log2 fold-change parameter increase decrease slope eQTL effect celltype. eQTL slope defined difference conditional mean genotype 1 genotype 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)). Default eqtl_log2fc = mean_log2fc (eQTL slope scaled conditional mean log2 fold-change). eqtl_reverse logical value determine whether eQTL slope trends reverse direction (TRUE) (FALSE). Default FALSE. mean_baseline numeric value specify minimum conditional mean genotype 1 \\(\\mu_{1}\\).  mean_baseline_only = FALSE, conditional mean maximum fitted (estimated marginal model) mean_baseline value.  Otherwise, conditional mean set mean_baseline value.  Default value NULL. eqtl_baseline numeric value specify minimum eQTL slope genotype 1 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)).  eqtl_baseline_only = FALSE, eQTL slope maximum slope fitted (estimated marginal model) eqtl_baseline value.  Otherwise, eQTL slope set eqtl_baseline value.  Default value NULL. mean_baseline_only logical value force conditional mean (linear prediction) genotype 1 \\(\\mu_{1}\\). Default FALSE. eqtl_baseline_only logical value force eQTL slope genotype 1 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)). Default FALSE. disp_scaling string value specify dispersion-mean scaling certain parametric models. Current options either \"linear\", \"quadratic\", \"none\". (NOTE: currently applicable negative binomial model.) cellstate_colname string cell state variable name. snp_colname string SNP id variable name. verbose logical value whether output messages related modified parameters. Default TRUE. debug logical whether output mod_list list addition marginal_list. ... Additional options.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify marginal models — modifyMarginalModels","text":"list marginal models similar marginal_list input. debug = TRUE, output mod_list list containing intermediate objects addition marginal_list.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyMarginalModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify marginal models — modifyMarginalModels","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify parameters of a glmmTMB model object — modifyModelPara","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"Modify parameters glmmTMB model object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"","code":"modifyModelPara(   model_obj,   eqtlgeno,   celltype,   neg_ctrl = FALSE,   mean_log2fc = 0,   eqtl_log2fc = mean_log2fc,   eqtl_reverse = FALSE,   mean_baseline = NULL,   eqtl_baseline = NULL,   mean_baseline_only = FALSE,   eqtl_baseline_only = FALSE,   disp_scaling = \"linear\",   cellstate_colname = \"cell_type\",   snp_colname = \"snp_id\",   verbose = TRUE,   debug = FALSE,   log_tol = 1e-04,   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"model_obj marginal model object gene. eqtlgeno dataframe eQTL annotations samples' genotype gene. celltype string specify cell type make modification. neg_ctrl logical value whether set negative control eQTL (ie. non-eGene).  option sets conditional means identical across genotypes (0, 1, 2).  neg_ctrl = TRUE, mean_log2fc option still applied set, eqtl_log2fc overidden impact.  Default FALSE. mean_log2fc numeric value log2 fold-change parameter increase decrease conditional mean genotype 1 \\(\\mu_{1}\\) cell type. Default mean_log2fc = 0 (parameters modified uses estimated parameters fitted marginal model). eqtl_log2fc numeric value log2 fold-change parameter increase decrease slope eQTL effect celltype. eQTL slope defined difference conditional mean genotype 1 genotype 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)). Default eqtl_log2fc = mean_log2fc (eQTL slope scaled conditional mean log2 fold-change). eqtl_reverse logical value determine whether eQTL slope trends reverse direction (TRUE) (FALSE). Default FALSE. mean_baseline numeric value specify minimum conditional mean genotype 1 \\(\\mu_{1}\\).  mean_baseline_only = FALSE, conditional mean maximum fitted (estimated marginal model) mean_baseline value.  Otherwise, conditional mean set mean_baseline value.  Default value NULL. eqtl_baseline numeric value specify minimum eQTL slope genotype 1 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)).  eqtl_baseline_only = FALSE, eQTL slope maximum slope fitted (estimated marginal model) eqtl_baseline value.  Otherwise, eQTL slope set eqtl_baseline value.  Default value NULL. mean_baseline_only logical value force conditional mean (linear prediction) genotype 1 \\(\\mu_{1}\\). Default FALSE. eqtl_baseline_only logical value force eQTL slope genotype 1 0 (\\(\\mu_{1}\\) - \\(\\mu_{0}\\)). Default FALSE. disp_scaling string value specify dispersion-mean scaling certain parametric models. Current options either \"linear\", \"quadratic\", \"none\". (NOTE: currently applicable negative binomial model.) cellstate_colname string cell state variable name. snp_colname string SNP id variable name. verbose logical value whether output messages related modified parameters. Default TRUE. debug logical value whether output intermediate objects used debugging purposes. Default FALSE. log_tol numeric value used tolerance log computation. Default value \\(1e-4\\). ... Additional options.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"list dataframe coefficients, model objects, optional outputs debugging enabled.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/modifyModelPara.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify parameters of a glmmTMB model object — modifyModelPara","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a power analysis — powerAnalysis","title":"Perform a power analysis — powerAnalysis","text":"Perform power analysis","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a power analysis — powerAnalysis","text":"","code":"powerAnalysis(   marginal_list,   marginal_model,   refit_formula = NULL,   geneid,   snpid,   type_specific,   type_vector,   method = c(\"nb\", \"poisson\", \"gaussian\", \"pseudoBulkLinear\"),   nindivs = NULL,   ncells = NULL,   nPool = NULL,   nIndivPerPool = NULL,   nCellPerPool = NULL,   alpha = 0.05,   nsims = 100,   ncores = 1 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a power analysis — powerAnalysis","text":"marginal_list output function fitMarginalPop(). marginal_model character showing model types full marginal model. refit_formula formula used refit marginal full model user wants . Default null. geneid character object contains geneid. snpid character object contains snpid. type_specific character object contains name covariate analysis specific . type_vector vector object contains specified type/level names covariate. method character object specifying method analyzed power. (Options: nb,poisson,gaussian,pseudoBulkLinear). nindivs vector numeric values showing numbers individuals user wants simulate. ncells vector numeric values showing numbers cells per individual user wants simulate. nPool vector numeric values showing many pools sequencing performed. nIndivPerPool numerical value showing many individuals sequenced one pool. nCellPerPool vector numeric values showing many cells sequenced one pool. alpha p value threshold rejecting H0 hypothesis. nsims number simulations calculating power. parameter affect resolution power value. ncores number CPU cores user wants use.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a power analysis — powerAnalysis","text":"list named features, containing list following items: intercept intercept genotype effect specified type/level. slope slope genotype effect specified type/level. power data frame contains power values different parameter settings. data data frame contains H1 H0 genotype effect estimates different parameter settings simulation times.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a power analysis — powerAnalysis","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a bootstrap confidence interval for each power — powerCICalculation","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"Calculate bootstrap confidence interval power","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"","code":"powerCICalculation(   res,   types,   nindivs,   ncells,   snp_number = 10,   gene_number = 800,   alpha = 0.05,   nsim = 1000,   conf = 0.05 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"res output function powerAnalysis() types vector object contains specified type/level names covariate. nindivs vector numeric values showing numbers individuals user wants simulate. ncells vector numeric values showing numbers cells per individual user wants simulate. snp_number number SNPs multiple testing correction. gene_number number genes multiple testing correction. alpha p value threshold rejecting H0 hypothesis. nsim number simulations calculating Bootstrap CI. conf Bootstrap CI interval.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"data frame contains average power standard deviations parameter settings.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/powerCICalculation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a bootstrap confidence interval for each power — powerCICalculation","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"The wrapper function for power analysis — runPowerAnalysis","title":"The wrapper function for power analysis — runPowerAnalysis","text":"wrapper function power analysis","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The wrapper function for power analysis — runPowerAnalysis","text":"","code":"runPowerAnalysis(   marginal_list,   marginal_model,   refit_formula = NULL,   geneid,   snpid,   type_specific,   type_vector,   methods,   nindivs = NULL,   ncells = NULL,   nPool = NULL,   nIndivPerPool = NULL,   nCellPerPool = NULL,   alpha = 0.05,   power_nsim = 100,   snp_number = 10,   gene_number = 800,   CI_nsim = 1000,   CI_conf = 0.05,   ncores = 1 )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The wrapper function for power analysis — runPowerAnalysis","text":"marginal_list output function fitMarginalPop(). marginal_model character showing model types full marginal model. refit_formula formula used refit marginal full model user wants . Default null. geneid character object contains geneid. snpid character object contains snpid. type_specific character object contains name covariate analysis specific . type_vector vector object contains specified type/level names covariate. methods vector character objects specifying methods analyzed power. (Options: nb,poisson,gaussian,pseudoBulkLinear). nindivs vector numeric values showing numbers individuals user wants simulate. ncells vector numeric values showing numbers cells per individual user wants simulate. nPool vector numeric values showing many pools sequencing performed. nIndivPerPool numerical value showing many individuals sequenced one pool. nCellPerPool vector numeric values showing many cells sequenced one pool. alpha p value threshold rejecting H0 hypothesis. power_nsim number simulations calculating power. parameter affect resolution power value. snp_number number SNPs multiple testing correction. gene_number number genes multiple testing correction. CI_nsim number simulations calculating Bootstrap CI. CI_conf Bootstrap CI interval. ncores number CPU cores user wants use.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The wrapper function for power analysis — runPowerAnalysis","text":"data frame contains power analysis result different parameter settings.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/runPowerAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The wrapper function for power analysis — runPowerAnalysis","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/scDesignPop-package.html","id":null,"dir":"Reference","previous_headings":"","what":"scDesignPop: Simulator for population-scale single-cell expression RNA-sequencing data — scDesignPop-package","title":"scDesignPop: Simulator for population-scale single-cell expression RNA-sequencing data — scDesignPop-package","text":"Simulate realistic population-scale single-cell RNA-sequencing (scRNA-seq) data single-cell expression quantitative trait loci analysis (sc-eQTL) using input eQTL data scRNA-seq data. use flexible, statistical modeling framework learns interpretable parameters real data.","code":""},{"path":[]},{"path":"https://github.com/chrisycd/scDesignPop/reference/scDesignPop-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"scDesignPop: Simulator for population-scale single-cell expression RNA-sequencing data — scDesignPop-package","text":"Maintainer: Chris Y. Dong chris.dong@ucla.edu (ORCID) Authors: Yihui Cen yihuicen@g.ucla.edu (ORCID)","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"Function fits multinomial regression model using input genotype principal components (PCs) population-level covariates training data outputs simulated cell proportions.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"","code":"simuCellProportion(   sce,   genoPC,   new_genoPC,   new_othercov,   PCnum = 5L,   cov_colnames = NULL,   indiv_colname = \"indiv\",   cellstate_colname = \"cell_type\",   cn_model_family = \"lognormal\",   cn_meanlog = NULL,   cn_sdlog = NULL,   cp_model_family = \"MN\",   cp_intercept = TRUE,   ... )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"sce SingleCellExperiment object. genoPC data frame individual genotype principal components sce input. first column must variable individual name indiv_colname. new_genoPC data frame individual genotype principal components simulated individuals. first column must variable individual name indiv_colname, followed \"PC1\", \"PC2\", etc. new_othercov data frame test data containing additional covariates colData sce. PCnum integer scalar specifying number principal components used multinomial regression. cov_colnames optional string vector scalar variable names include cell proportion model. Variables must exist new_othercov colData sce. indiv_colname string scalar specify variable sce containing individuals. cellstate_colname string scalar specify variable sce containing cell states (ie. cell types). cn_model_family string scalar specify model family used total cell modeling. Currently 'lognormal' fitdistr supported. cn_meanlog numeric scalar mean parameter (log scale) total cell number model. cn_meanlog = NULL, parameter estimated input data. cn_sdlog numeric scalar standard deviation parameter (log scale) total cell number model. n_sdlog = NULL, parameter estimated input data. cp_model_family string scalar specify model family used cell proportion modeling. Currently 'MN' dist supported. cp_intercept logical scalar whether include intercept cell proportion model. ... additional optional arguments.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"outputs list following elements: simu_cov cell--covariate data frame simulated cell types corresponding individual. cp_simu_df cell type--covariate data frame summarizing simulate cell proportions, total cell numbers, cells per cell types. cp_modelfit fitted model object cell proportion model. cn_modelfit fitted model object cell number model.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuCellProportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate cell proportions using genotype principal components and population-level covariates — simuCellProportion","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate new data — simuNewPop","title":"Simulate new data — simuNewPop","text":"simuNewPop generates new simulated data based fitted marginal copula models. function adapted simu_new function scDesign3 v0.99.7","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate new data — simuNewPop","text":"","code":"simuNewPop(   sce,   assay_use = \"counts\",   mean_mat,   sigma_mat,   zero_mat,   quantile_mat = NULL,   copula_list,   n_cores,   fastmvn = FALSE,   family_use,   nonnegative = TRUE,   nonzerovar = FALSE,   input_data,   new_covariate,   important_feature = \"all\",   parallelization = \"mcmapply\",   BPPARAM = NULL,   filtered_gene,   mean_limit = 1e+15,   debug = FALSE )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate new data — simuNewPop","text":"sce SingleCellExperiment object. assay_use string indicates assay use sce. Default 'counts'. mean_mat cell feature matrix mean parameter. sigma_mat cell feature matrix sigma parameter. zero_mat cell feature matrix zero-inflation parameter. quantile_mat cell feature matrix multivariate quantile. copula_list list copulas generating multivariate quantile matrix. provided, quantile_mat must NULL. n_cores integer. number cores use. fastmvn logical variable. TRUE, sampling multivariate Gaussian done mvnfast, otherwise mvtnorm. Default FALSE. family_use string marginal distribution. Must one 'poisson', 'nb', 'gaussian'. nonnegative logical variable. TRUE, values < 0 synthetic data converted 0. Default TRUE (since expression matrix nonnegative). nonzerovar logical variable. TRUE, gene zero variance, cell replaced 1. designed avoiding potential errors, example, PCA. input_data input count matrix. new_covariate data.frame contains covariates targeted simulated data  constructDataPop. important_feature important_feature string vector indicates whether gene used correlation estimation . string, string must either \"\" (using genes) \"auto\", indicates genes automatically selected based proportion zero expression across cells gene. Gene zero proportion greater 0.8 excluded form gene-gene correlation estimation. vector, logical vector length equal number genes sce. TRUE logical vector means corresponding gene included gene-gene correlation estimation FALSE logical vector means corresponding gene excluded gene-gene correlation estimation. default value \"\". parallelization string indicating specific parallelization function use. Must one 'mcmapply', 'bpmapply', 'pbmcmapply', corresponds parallelization function package parallel,BiocParallel, pbmcapply respectively. default value 'mcmapply'. BPPARAM MulticoreParam object NULL. parameter parallelization = 'mcmapply' 'pbmcmapply', parameter must NULL. parameter parallelization = 'bpmapply',  parameter must one MulticoreParam object offered package 'BiocParallel. default value NULL. filtered_gene vector NULL contains genes excluded marginal copula fitting mean_limit numeric scalar filter genes cells exceed limit mean_mat. default value 1e15. avoid features extremely high unreasonable means. debug logical scalar whether return list variables addition simulated count matrix. default FALSE.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate new data — simuNewPop","text":"feature cell matrix new simulated count (expression) matrix sparse matrix.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate new data — simuNewPop","text":"function takes new covariate (use) constructDataPop, parameter matrices extractParaPop multivariate Unifs fitCopulaPop.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simuNewPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate new data — simuNewPop","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate new design matrix for power analysis — simulatePADesignMatrix","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"Simulate new design matrix power analysis","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"","code":"simulatePADesignMatrix(   fit,   df_sel,   nindiv_total,   model = c(\"nb\", \"poisson\", \"gaussian\"),   snpid,   nindiv,   ncell,   type_specific )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"fit fitted stats::model object. df_sel data frame contains new design matrix. nindiv_total vector contains number individuals genotype. model character showing model types full marginal model. snpid character object contains snpid. nindiv numeric value showing number individuals user wants simulate. ncell numeric value showing number cells per individual user wants simulate. type_specific character object contains name covariate analysis specific .","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"new data frame contains design matrix simulated response.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/simulatePADesignMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate new design matrix for power analysis — simulatePADesignMatrix","text":"","code":"NULL #> NULL"},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the power analysis result — visualizePowerResult","title":"Visualize the power analysis result — visualizePowerResult","text":"Visualize power analysis result","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the power analysis result — visualizePowerResult","text":"","code":"visualizePowerResult(   power_result,   celltypes,   x_axis = \"nindiv\",   y_axis = \"ncell\",   col_group = \"method\",   geneid,   snpid )"},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the power analysis result — visualizePowerResult","text":"power_result data frame contains power analysis result different parameter settings. celltypes vector cell types selected visualization. x_axis character specifies x axis. Default number individuals. y_axis character specifies y axis. Default number cells per individual. col_group character specifies color groups. Default eQTL model. geneid character object contains geneid part plot title. snpid character object contains snpid part plot title.","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the power analysis result — visualizePowerResult","text":"ggplot object","code":""},{"path":"https://github.com/chrisycd/scDesignPop/reference/visualizePowerResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the power analysis result — visualizePowerResult","text":"","code":"NULL #> NULL"}]
